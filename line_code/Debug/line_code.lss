
line_code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800100  00000f32  00000fc6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f32  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  00800132  00800132  00000ff8  2**0
                  ALLOC
  3 .stab         00000c84  00000000  00000000  00000ff8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000001fe  00000000  00000000  00001c7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00001e7a  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000130  00000000  00000000  00001ea9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001748  00000000  00000000  00001fd9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000993  00000000  00000000  00003721  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001463  00000000  00000000  000040b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000258  00000000  00000000  00005518  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000c047  00000000  00000000  00005770  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001036  00000000  00000000  000117b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000d0  00000000  00000000  000127ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0000341f  00000000  00000000  000128bd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	4c c0       	rjmp	.+152    	; 0x9e <__bad_interrupt>
   6:	00 00       	nop
   8:	4a c0       	rjmp	.+148    	; 0x9e <__bad_interrupt>
   a:	00 00       	nop
   c:	48 c0       	rjmp	.+144    	; 0x9e <__bad_interrupt>
   e:	00 00       	nop
  10:	46 c0       	rjmp	.+140    	; 0x9e <__bad_interrupt>
  12:	00 00       	nop
  14:	44 c0       	rjmp	.+136    	; 0x9e <__bad_interrupt>
  16:	00 00       	nop
  18:	42 c0       	rjmp	.+132    	; 0x9e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	40 c0       	rjmp	.+128    	; 0x9e <__bad_interrupt>
  1e:	00 00       	nop
  20:	3e c0       	rjmp	.+124    	; 0x9e <__bad_interrupt>
  22:	00 00       	nop
  24:	3c c0       	rjmp	.+120    	; 0x9e <__bad_interrupt>
  26:	00 00       	nop
  28:	3a c0       	rjmp	.+116    	; 0x9e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	38 c0       	rjmp	.+112    	; 0x9e <__bad_interrupt>
  2e:	00 00       	nop
  30:	36 c0       	rjmp	.+108    	; 0x9e <__bad_interrupt>
  32:	00 00       	nop
  34:	34 c0       	rjmp	.+104    	; 0x9e <__bad_interrupt>
  36:	00 00       	nop
  38:	32 c0       	rjmp	.+100    	; 0x9e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	30 c0       	rjmp	.+96     	; 0x9e <__bad_interrupt>
  3e:	00 00       	nop
  40:	2e c0       	rjmp	.+92     	; 0x9e <__bad_interrupt>
  42:	00 00       	nop
  44:	2c c0       	rjmp	.+88     	; 0x9e <__bad_interrupt>
  46:	00 00       	nop
  48:	2a c0       	rjmp	.+84     	; 0x9e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	28 c0       	rjmp	.+80     	; 0x9e <__bad_interrupt>
  4e:	00 00       	nop
  50:	26 c0       	rjmp	.+76     	; 0x9e <__bad_interrupt>
  52:	00 00       	nop
  54:	24 c0       	rjmp	.+72     	; 0x9e <__bad_interrupt>
  56:	00 00       	nop
  58:	22 c0       	rjmp	.+68     	; 0x9e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	20 c0       	rjmp	.+64     	; 0x9e <__bad_interrupt>
  5e:	00 00       	nop
  60:	1e c0       	rjmp	.+60     	; 0x9e <__bad_interrupt>
  62:	00 00       	nop
  64:	1c c0       	rjmp	.+56     	; 0x9e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e3       	ldi	r30, 0x32	; 50
  7c:	ff e0       	ldi	r31, 0x0F	; 15
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 33       	cpi	r26, 0x32	; 50
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e3       	ldi	r26, 0x32	; 50
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 34       	cpi	r26, 0x48	; 72
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	35 d1       	rcall	.+618    	; 0x306 <main>
  9c:	48 c7       	rjmp	.+3728   	; 0xf2e <_exit>

0000009e <__bad_interrupt>:
  9e:	b0 cf       	rjmp	.-160    	; 0x0 <__vectors>

000000a0 <uart_putchar>:
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) )
	;
	/* Put data into buffer, sends the data */
	UDR0 = data;
  a0:	cf 93       	push	r28
  a2:	c8 2f       	mov	r28, r24
  a4:	8a 30       	cpi	r24, 0x0A	; 10
  a6:	11 f4       	brne	.+4      	; 0xac <uart_putchar+0xc>
  a8:	8d e0       	ldi	r24, 0x0D	; 13
  aa:	fa df       	rcall	.-12     	; 0xa0 <uart_putchar>
  ac:	e0 ec       	ldi	r30, 0xC0	; 192
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	90 81       	ld	r25, Z
  b2:	95 ff       	sbrs	r25, 5
  b4:	fd cf       	rjmp	.-6      	; 0xb0 <uart_putchar+0x10>
  b6:	c0 93 c6 00 	sts	0x00C6, r28
  ba:	cf 91       	pop	r28
  bc:	08 95       	ret

000000be <uart_getchar>:
  be:	e0 ec       	ldi	r30, 0xC0	; 192
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	88 23       	and	r24, r24
  c6:	ec f7       	brge	.-6      	; 0xc2 <uart_getchar+0x4>
  c8:	80 91 c6 00 	lds	r24, 0x00C6
  cc:	08 95       	ret

000000ce <ReadADC>:
  ce:	ec e7       	ldi	r30, 0x7C	; 124
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	90 81       	ld	r25, Z
  d4:	8f 70       	andi	r24, 0x0F	; 15
  d6:	90 7f       	andi	r25, 0xF0	; 240
  d8:	98 2b       	or	r25, r24
  da:	90 83       	st	Z, r25
  dc:	ea e7       	ldi	r30, 0x7A	; 122
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	80 64       	ori	r24, 0x40	; 64
  e4:	80 83       	st	Z, r24
  e6:	80 81       	ld	r24, Z
  e8:	86 fd       	sbrc	r24, 6
  ea:	fd cf       	rjmp	.-6      	; 0xe6 <ReadADC+0x18>
  ec:	20 91 78 00 	lds	r18, 0x0078
  f0:	30 91 79 00 	lds	r19, 0x0079
  f4:	82 2f       	mov	r24, r18
  f6:	93 2f       	mov	r25, r19
  f8:	08 95       	ret

000000fa <setMotors>:
  fa:	87 bd       	out	0x27, r24	; 39
  fc:	68 bd       	out	0x28, r22	; 40
  fe:	41 30       	cpi	r20, 0x01	; 1
 100:	11 f4       	brne	.+4      	; 0x106 <setMotors+0xc>
 102:	57 9a       	sbi	0x0a, 7	; 10
 104:	01 c0       	rjmp	.+2      	; 0x108 <setMotors+0xe>
 106:	57 98       	cbi	0x0a, 7	; 10
 108:	21 30       	cpi	r18, 0x01	; 1
 10a:	11 f4       	brne	.+4      	; 0x110 <setMotors+0x16>
 10c:	20 9a       	sbi	0x04, 0	; 4
 10e:	08 95       	ret
 110:	20 98       	cbi	0x04, 0	; 4
 112:	08 95       	ret

00000114 <motor_init>:
 114:	56 9a       	sbi	0x0a, 6	; 10
 116:	55 9a       	sbi	0x0a, 5	; 10
 118:	17 bc       	out	0x27, r1	; 39
 11a:	18 bc       	out	0x28, r1	; 40
 11c:	84 b5       	in	r24, 0x24	; 36
 11e:	80 68       	ori	r24, 0x80	; 128
 120:	84 bd       	out	0x24, r24	; 36
 122:	84 b5       	in	r24, 0x24	; 36
 124:	80 62       	ori	r24, 0x20	; 32
 126:	84 bd       	out	0x24, r24	; 36
 128:	84 b5       	in	r24, 0x24	; 36
 12a:	83 60       	ori	r24, 0x03	; 3
 12c:	84 bd       	out	0x24, r24	; 36
 12e:	85 b5       	in	r24, 0x25	; 37
 130:	82 60       	ori	r24, 0x02	; 2
 132:	85 bd       	out	0x25, r24	; 37
 134:	57 9a       	sbi	0x0a, 7	; 10
 136:	20 9a       	sbi	0x04, 0	; 4
 138:	08 95       	ret

0000013a <adc_init>:
 13a:	ec e7       	ldi	r30, 0x7C	; 124
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	80 81       	ld	r24, Z
 140:	80 64       	ori	r24, 0x40	; 64
 142:	80 83       	st	Z, r24
 144:	ea e7       	ldi	r30, 0x7A	; 122
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 81       	ld	r24, Z
 14a:	87 68       	ori	r24, 0x87	; 135
 14c:	80 83       	st	Z, r24
 14e:	08 95       	ret

00000150 <uart_init>:
 150:	90 93 c5 00 	sts	0x00C5, r25
 154:	80 93 c4 00 	sts	0x00C4, r24
 158:	88 e1       	ldi	r24, 0x18	; 24
 15a:	80 93 c1 00 	sts	0x00C1, r24
 15e:	86 e0       	ldi	r24, 0x06	; 6
 160:	80 93 c2 00 	sts	0x00C2, r24
 164:	08 95       	ret

00000166 <USART_Receive>:
}

unsigned char USART_Receive( void )
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) )
 166:	e0 ec       	ldi	r30, 0xC0	; 192
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 81       	ld	r24, Z
 16c:	88 23       	and	r24, r24
 16e:	ec f7       	brge	.-6      	; 0x16a <USART_Receive+0x4>
	;
	/* Get and return received data from buffer */
	return UDR0;
 170:	80 91 c6 00 	lds	r24, 0x00C6
}
 174:	08 95       	ret

00000176 <initialize>:
uint16_t sum = 0;

void initialize()
{
	
	uart_init(MYUBRR);
 176:	83 e3       	ldi	r24, 0x33	; 51
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	ea df       	rcall	.-44     	; 0x150 <uart_init>
	stdout = &uart_output;
 17c:	8e e0       	ldi	r24, 0x0E	; 14
 17e:	91 e0       	ldi	r25, 0x01	; 1
 180:	90 93 45 01 	sts	0x0145, r25
 184:	80 93 44 01 	sts	0x0144, r24
	stdin  = &uart_input;
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	91 e0       	ldi	r25, 0x01	; 1
 18c:	90 93 43 01 	sts	0x0143, r25
 190:	80 93 42 01 	sts	0x0142, r24
	
	board_init();
 194:	59 d3       	rcall	.+1714   	; 0x848 <board_init>
	motor_init();
 196:	be df       	rcall	.-132    	; 0x114 <motor_init>
	adc_init();
 198:	d0 cf       	rjmp	.-96     	; 0x13a <adc_init>

0000019a <read_line>:
}

uint16_t read_line()
{
 19a:	4f 92       	push	r4
 19c:	5f 92       	push	r5
 19e:	6f 92       	push	r6
 1a0:	7f 92       	push	r7
 1a2:	8f 92       	push	r8
 1a4:	9f 92       	push	r9
 1a6:	af 92       	push	r10
 1a8:	bf 92       	push	r11
 1aa:	cf 92       	push	r12
 1ac:	df 92       	push	r13
 1ae:	ef 92       	push	r14
 1b0:	ff 92       	push	r15
 1b2:	0f 93       	push	r16
 1b4:	1f 93       	push	r17
 1b6:	cf 93       	push	r28
 1b8:	df 93       	push	r29
 1ba:	cd b7       	in	r28, 0x3d	; 61
 1bc:	de b7       	in	r29, 0x3e	; 62
 1be:	2c 97       	sbiw	r28, 0x0c	; 12
 1c0:	0f b6       	in	r0, 0x3f	; 63
 1c2:	f8 94       	cli
 1c4:	de bf       	out	0x3e, r29	; 62
 1c6:	0f be       	out	0x3f, r0	; 63
 1c8:	cd bf       	out	0x3d, r28	; 61
	sensor0 = ReadADC(5);
 1ca:	85 e0       	ldi	r24, 0x05	; 5
 1cc:	80 df       	rcall	.-256    	; 0xce <ReadADC>
 1ce:	90 93 3f 01 	sts	0x013F, r25
 1d2:	80 93 3e 01 	sts	0x013E, r24
	sensor1 = ReadADC(4);
 1d6:	84 e0       	ldi	r24, 0x04	; 4
 1d8:	7a df       	rcall	.-268    	; 0xce <ReadADC>
 1da:	90 93 3d 01 	sts	0x013D, r25
 1de:	80 93 3c 01 	sts	0x013C, r24
	sensor2 = ReadADC(3);
 1e2:	83 e0       	ldi	r24, 0x03	; 3
 1e4:	74 df       	rcall	.-280    	; 0xce <ReadADC>
 1e6:	90 93 3b 01 	sts	0x013B, r25
 1ea:	80 93 3a 01 	sts	0x013A, r24
	sensor3 = ReadADC(2);
 1ee:	82 e0       	ldi	r24, 0x02	; 2
 1f0:	6e df       	rcall	.-292    	; 0xce <ReadADC>
 1f2:	90 93 39 01 	sts	0x0139, r25
 1f6:	80 93 38 01 	sts	0x0138, r24
	sensor4 = ReadADC(1);
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	68 df       	rcall	.-304    	; 0xce <ReadADC>
 1fe:	90 93 37 01 	sts	0x0137, r25
 202:	80 93 36 01 	sts	0x0136, r24
	sensor5 = ReadADC(0);
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	62 df       	rcall	.-316    	; 0xce <ReadADC>
 20a:	90 93 35 01 	sts	0x0135, r25
 20e:	80 93 34 01 	sts	0x0134, r24
	
	unsigned int sensor_values[6];
	sensor_values[0] = ReadADC(5);
 212:	85 e0       	ldi	r24, 0x05	; 5
 214:	5c df       	rcall	.-328    	; 0xce <ReadADC>
 216:	9a 83       	std	Y+2, r25	; 0x02
 218:	89 83       	std	Y+1, r24	; 0x01
	sensor_values[1] = ReadADC(4);
 21a:	84 e0       	ldi	r24, 0x04	; 4
 21c:	58 df       	rcall	.-336    	; 0xce <ReadADC>
 21e:	9c 83       	std	Y+4, r25	; 0x04
 220:	8b 83       	std	Y+3, r24	; 0x03
	sensor_values[2] = ReadADC(3);
 222:	83 e0       	ldi	r24, 0x03	; 3
 224:	54 df       	rcall	.-344    	; 0xce <ReadADC>
 226:	9e 83       	std	Y+6, r25	; 0x06
 228:	8d 83       	std	Y+5, r24	; 0x05
	sensor_values[3] = ReadADC(2);
 22a:	82 e0       	ldi	r24, 0x02	; 2
 22c:	50 df       	rcall	.-352    	; 0xce <ReadADC>
 22e:	98 87       	std	Y+8, r25	; 0x08
 230:	8f 83       	std	Y+7, r24	; 0x07
	sensor_values[4] = ReadADC(1);
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	4c df       	rcall	.-360    	; 0xce <ReadADC>
 236:	9a 87       	std	Y+10, r25	; 0x0a
 238:	89 87       	std	Y+9, r24	; 0x09
	sensor_values[5] = ReadADC(0);
 23a:	80 e0       	ldi	r24, 0x00	; 0
 23c:	48 df       	rcall	.-368    	; 0xce <ReadADC>
 23e:	9c 87       	std	Y+12, r25	; 0x0c
 240:	8b 87       	std	Y+11, r24	; 0x0b
 242:	8e 01       	movw	r16, r28
 244:	0f 5f       	subi	r16, 0xFF	; 255
 246:	1f 4f       	sbci	r17, 0xFF	; 255
 248:	c1 2c       	mov	r12, r1
 24a:	d1 2c       	mov	r13, r1
 24c:	76 01       	movw	r14, r12
	// before division
	unsigned int sum; // this is for the denominator which is <= 64000
	static int last_value=0; // assume initially that the line is left.

	avg = 0;
	sum = 0;
 24e:	a1 2c       	mov	r10, r1
 250:	b1 2c       	mov	r11, r1
	unsigned long avg; // this is for the weighted total, which is long
	// before division
	unsigned int sum; // this is for the denominator which is <= 64000
	static int last_value=0; // assume initially that the line is left.

	avg = 0;
 252:	41 2c       	mov	r4, r1
 254:	51 2c       	mov	r5, r1
 256:	32 01       	movw	r6, r4
	sensor_values[2] = ReadADC(3);
	sensor_values[3] = ReadADC(2);
	sensor_values[4] = ReadADC(1);
	sensor_values[5] = ReadADC(0);
	
	unsigned char i, on_line = 0;
 258:	91 2c       	mov	r9, r1
	for(i=0 ; i<6 ;i++) {
		int value = sensor_values[i];

		// keep track of whether we see the line at all
		if(value > 200) {
			on_line = 1;
 25a:	88 24       	eor	r8, r8
 25c:	83 94       	inc	r8

	avg = 0;
	sum = 0;
	
	for(i=0 ; i<6 ;i++) {
		int value = sensor_values[i];
 25e:	d8 01       	movw	r26, r16
 260:	ed 91       	ld	r30, X+
 262:	fd 91       	ld	r31, X+
 264:	8d 01       	movw	r16, r26
 266:	cf 01       	movw	r24, r30

		// keep track of whether we see the line at all
		if(value > 200) {
 268:	e9 3c       	cpi	r30, 0xC9	; 201
 26a:	f1 05       	cpc	r31, r1
 26c:	0c f0       	brlt	.+2      	; 0x270 <read_line+0xd6>
			on_line = 1;
 26e:	98 2c       	mov	r9, r8
		}
		
		// only average in values that are above a noise threshold
		if(value > 50) {
 270:	c3 97       	sbiw	r24, 0x33	; 51
 272:	54 f0       	brlt	.+20     	; 0x288 <read_line+0xee>
			avg += (long)(value) * (i * 1000);
 274:	df 01       	movw	r26, r30
 276:	a7 01       	movw	r20, r14
 278:	96 01       	movw	r18, r12
 27a:	37 d3       	rcall	.+1646   	; 0x8ea <__mulshisi3>
 27c:	46 0e       	add	r4, r22
 27e:	57 1e       	adc	r5, r23
 280:	68 1e       	adc	r6, r24
 282:	79 1e       	adc	r7, r25
			sum += value;
 284:	ae 0e       	add	r10, r30
 286:	bf 1e       	adc	r11, r31
 288:	b8 ee       	ldi	r27, 0xE8	; 232
 28a:	cb 0e       	add	r12, r27
 28c:	b3 e0       	ldi	r27, 0x03	; 3
 28e:	db 1e       	adc	r13, r27
 290:	e1 1c       	adc	r14, r1
 292:	f1 1c       	adc	r15, r1
	static int last_value=0; // assume initially that the line is left.

	avg = 0;
	sum = 0;
	
	for(i=0 ; i<6 ;i++) {
 294:	20 e7       	ldi	r18, 0x70	; 112
 296:	c2 16       	cp	r12, r18
 298:	27 e1       	ldi	r18, 0x17	; 23
 29a:	d2 06       	cpc	r13, r18
 29c:	e1 04       	cpc	r14, r1
 29e:	f1 04       	cpc	r15, r1
 2a0:	f1 f6       	brne	.-68     	; 0x25e <read_line+0xc4>
			avg += (long)(value) * (i * 1000);
			sum += value;
		}
	}

	if(!on_line)
 2a2:	91 10       	cpse	r9, r1
 2a4:	0a c0       	rjmp	.+20     	; 0x2ba <read_line+0x120>
	{
		// If it last read to the left of center, return 0.
		if(last_value < (6-1)*1000/2)
 2a6:	80 91 40 01 	lds	r24, 0x0140
 2aa:	90 91 41 01 	lds	r25, 0x0141
 2ae:	84 3c       	cpi	r24, 0xC4	; 196
 2b0:	99 40       	sbci	r25, 0x09	; 9
 2b2:	74 f4       	brge	.+28     	; 0x2d0 <read_line+0x136>
		return 0;
 2b4:	20 e0       	ldi	r18, 0x00	; 0
 2b6:	30 e0       	ldi	r19, 0x00	; 0
 2b8:	0d c0       	rjmp	.+26     	; 0x2d4 <read_line+0x13a>
		else
		return (6-1)*1000;

	}

	last_value = avg/sum;
 2ba:	95 01       	movw	r18, r10
 2bc:	40 e0       	ldi	r20, 0x00	; 0
 2be:	50 e0       	ldi	r21, 0x00	; 0
 2c0:	c3 01       	movw	r24, r6
 2c2:	b2 01       	movw	r22, r4
 2c4:	d5 d2       	rcall	.+1450   	; 0x870 <__udivmodsi4>
 2c6:	20 93 40 01 	sts	0x0140, r18
 2ca:	30 93 41 01 	sts	0x0141, r19
 2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <read_line+0x13a>
		if(last_value < (6-1)*1000/2)
		return 0;
		
		// If it last read to the right of center, return the max.
		else
		return (6-1)*1000;
 2d0:	28 e8       	ldi	r18, 0x88	; 136
 2d2:	33 e1       	ldi	r19, 0x13	; 19
	}

	last_value = avg/sum;

	return last_value;
}
 2d4:	82 2f       	mov	r24, r18
 2d6:	93 2f       	mov	r25, r19
 2d8:	2c 96       	adiw	r28, 0x0c	; 12
 2da:	0f b6       	in	r0, 0x3f	; 63
 2dc:	f8 94       	cli
 2de:	de bf       	out	0x3e, r29	; 62
 2e0:	0f be       	out	0x3f, r0	; 63
 2e2:	cd bf       	out	0x3d, r28	; 61
 2e4:	df 91       	pop	r29
 2e6:	cf 91       	pop	r28
 2e8:	1f 91       	pop	r17
 2ea:	0f 91       	pop	r16
 2ec:	ff 90       	pop	r15
 2ee:	ef 90       	pop	r14
 2f0:	df 90       	pop	r13
 2f2:	cf 90       	pop	r12
 2f4:	bf 90       	pop	r11
 2f6:	af 90       	pop	r10
 2f8:	9f 90       	pop	r9
 2fa:	8f 90       	pop	r8
 2fc:	7f 90       	pop	r7
 2fe:	6f 90       	pop	r6
 300:	5f 90       	pop	r5
 302:	4f 90       	pop	r4
 304:	08 95       	ret

00000306 <main>:


////////////////////////////////
//Start of main routine
int main (void)
{
 306:	cf 93       	push	r28
 308:	df 93       	push	r29
 30a:	cd b7       	in	r28, 0x3d	; 61
 30c:	de b7       	in	r29, 0x3e	; 62
 30e:	c0 59       	subi	r28, 0x90	; 144
 310:	d1 40       	sbci	r29, 0x01	; 1
 312:	0f b6       	in	r0, 0x3f	; 63
 314:	f8 94       	cli
 316:	de bf       	out	0x3e, r29	; 62
 318:	0f be       	out	0x3f, r0	; 63
 31a:	cd bf       	out	0x3d, r28	; 61
	unsigned int last_proportional=0;
	long integral=0;
	
	char str[400]; //buffer for printing to Arduino Due
	
	initialize();
 31c:	2c df       	rcall	.-424    	; 0x176 <initialize>
			//_delay_ms(1);
			sensor5 = ReadADC(0);
		
			unsigned int position = read_line();
		
			sprintf(str, "%d %d %d %d %d %d %d", sensor0, sensor1, sensor2, sensor3, sensor4, sensor5, position);
 31e:	0f 2e       	mov	r0, r31
 320:	fc e1       	ldi	r31, 0x1C	; 28
 322:	ef 2e       	mov	r14, r31
 324:	f1 e0       	ldi	r31, 0x01	; 1
 326:	ff 2e       	mov	r15, r31
 328:	f0 2d       	mov	r31, r0
 32a:	8e 01       	movw	r16, r28
 32c:	0f 5f       	subi	r16, 0xFF	; 255
 32e:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		
		
		
		//Print sensor values mode - incorporate into control structure later
		char fromPC = USART_Receive();
 330:	1a df       	rcall	.-460    	; 0x166 <USART_Receive>
		
		if (fromPC == 'm')
 332:	8d 36       	cpi	r24, 0x6D	; 109
 334:	31 f4       	brne	.+12     	; 0x342 <main+0x3c>
		{
			setMotors(100,100,1,1);
 336:	21 e0       	ldi	r18, 0x01	; 1
 338:	41 e0       	ldi	r20, 0x01	; 1
 33a:	64 e6       	ldi	r22, 0x64	; 100
 33c:	84 e6       	ldi	r24, 0x64	; 100
 33e:	dd de       	rcall	.-582    	; 0xfa <setMotors>
 340:	f7 cf       	rjmp	.-18     	; 0x330 <main+0x2a>
		}
		if (fromPC == 's')
 342:	83 37       	cpi	r24, 0x73	; 115
 344:	09 f0       	breq	.+2      	; 0x348 <main+0x42>
 346:	58 c0       	rjmp	.+176    	; 0x3f8 <main+0xf2>
		{
			
			//puts("Sensor readings: \n");
		

			sensor0 = ReadADC(5);
 348:	85 e0       	ldi	r24, 0x05	; 5
 34a:	c1 de       	rcall	.-638    	; 0xce <ReadADC>
 34c:	90 93 3f 01 	sts	0x013F, r25
 350:	80 93 3e 01 	sts	0x013E, r24
			//_delay_ms(1);
			sensor1 = ReadADC(4);
 354:	84 e0       	ldi	r24, 0x04	; 4
 356:	bb de       	rcall	.-650    	; 0xce <ReadADC>
 358:	90 93 3d 01 	sts	0x013D, r25
 35c:	80 93 3c 01 	sts	0x013C, r24
			//_delay_ms(1);
			sensor2 = ReadADC(3);
 360:	83 e0       	ldi	r24, 0x03	; 3
 362:	b5 de       	rcall	.-662    	; 0xce <ReadADC>
 364:	90 93 3b 01 	sts	0x013B, r25
 368:	80 93 3a 01 	sts	0x013A, r24
			//_delay_ms(1);
			sensor3 = ReadADC(2);
 36c:	82 e0       	ldi	r24, 0x02	; 2
 36e:	af de       	rcall	.-674    	; 0xce <ReadADC>
 370:	90 93 39 01 	sts	0x0139, r25
 374:	80 93 38 01 	sts	0x0138, r24
			//_delay_ms(1);
			sensor4 = ReadADC(1);
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	a9 de       	rcall	.-686    	; 0xce <ReadADC>
 37c:	90 93 37 01 	sts	0x0137, r25
 380:	80 93 36 01 	sts	0x0136, r24
			//_delay_ms(1);
			sensor5 = ReadADC(0);
 384:	80 e0       	ldi	r24, 0x00	; 0
 386:	a3 de       	rcall	.-698    	; 0xce <ReadADC>
 388:	90 93 35 01 	sts	0x0135, r25
 38c:	80 93 34 01 	sts	0x0134, r24
		
			unsigned int position = read_line();
 390:	04 df       	rcall	.-504    	; 0x19a <read_line>
		
			sprintf(str, "%d %d %d %d %d %d %d", sensor0, sensor1, sensor2, sensor3, sensor4, sensor5, position);
 392:	9f 93       	push	r25
 394:	8f 93       	push	r24
 396:	80 91 35 01 	lds	r24, 0x0135
 39a:	8f 93       	push	r24
 39c:	80 91 34 01 	lds	r24, 0x0134
 3a0:	8f 93       	push	r24
 3a2:	80 91 37 01 	lds	r24, 0x0137
 3a6:	8f 93       	push	r24
 3a8:	80 91 36 01 	lds	r24, 0x0136
 3ac:	8f 93       	push	r24
 3ae:	80 91 39 01 	lds	r24, 0x0139
 3b2:	8f 93       	push	r24
 3b4:	80 91 38 01 	lds	r24, 0x0138
 3b8:	8f 93       	push	r24
 3ba:	80 91 3b 01 	lds	r24, 0x013B
 3be:	8f 93       	push	r24
 3c0:	80 91 3a 01 	lds	r24, 0x013A
 3c4:	8f 93       	push	r24
 3c6:	80 91 3d 01 	lds	r24, 0x013D
 3ca:	8f 93       	push	r24
 3cc:	80 91 3c 01 	lds	r24, 0x013C
 3d0:	8f 93       	push	r24
 3d2:	80 91 3f 01 	lds	r24, 0x013F
 3d6:	8f 93       	push	r24
 3d8:	80 91 3e 01 	lds	r24, 0x013E
 3dc:	8f 93       	push	r24
 3de:	ff 92       	push	r15
 3e0:	ef 92       	push	r14
 3e2:	1f 93       	push	r17
 3e4:	0f 93       	push	r16
 3e6:	e0 d2       	rcall	.+1472   	; 0x9a8 <sprintf>
		
			puts(str);
 3e8:	c8 01       	movw	r24, r16
 3ea:	af d2       	rcall	.+1374   	; 0x94a <puts>
 3ec:	0f b6       	in	r0, 0x3f	; 63
 3ee:	f8 94       	cli
 3f0:	de bf       	out	0x3e, r29	; 62
 3f2:	0f be       	out	0x3f, r0	; 63
 3f4:	cd bf       	out	0x3d, r28	; 61
 3f6:	9c cf       	rjmp	.-200    	; 0x330 <main+0x2a>
		
		}
		
		if (fromPC == '1')
 3f8:	81 33       	cpi	r24, 0x31	; 49
 3fa:	09 f0       	breq	.+2      	; 0x3fe <main+0xf8>
 3fc:	87 c0       	rjmp	.+270    	; 0x50c <main+0x206>
 3fe:	c1 2c       	mov	r12, r1
 400:	d1 2c       	mov	r13, r1
 402:	76 01       	movw	r14, r12
 404:	a1 2c       	mov	r10, r1
 406:	b1 2c       	mov	r11, r1
				// Compute the difference between the two motor power settings,
				// m1 - m2.  If this is a positive number the robot will turn
				// to the right.  If it is a negative number, the robot will
				// turn to the left, and the magnitude of the number determines
				// the sharpness of the turn.
				int power_difference = proportional/40 + derivative*3/2 + integral/10000;
 408:	0f 2e       	mov	r0, r31
 40a:	f8 e2       	ldi	r31, 0x28	; 40
 40c:	2f 2e       	mov	r2, r31
 40e:	31 2c       	mov	r3, r1
 410:	f0 2d       	mov	r31, r0
 412:	0f 2e       	mov	r0, r31
 414:	f0 e1       	ldi	r31, 0x10	; 16
 416:	4f 2e       	mov	r4, r31
 418:	f7 e2       	ldi	r31, 0x27	; 39
 41a:	5f 2e       	mov	r5, r31
 41c:	61 2c       	mov	r6, r1
 41e:	71 2c       	mov	r7, r1
 420:	f0 2d       	mov	r31, r0
				power_difference = -max;

				if(power_difference < 0)
				setMotors(max,max+power_difference,1,1);
				else
				setMotors(max-power_difference, max, 1,1);
 422:	0f 2e       	mov	r0, r31
 424:	f4 e6       	ldi	r31, 0x64	; 100
 426:	9f 2e       	mov	r9, r31
 428:	f0 2d       	mov	r31, r0
			while(1)
			{
				// Get the position of the line.  Note that we *must* provide
				// the "sensors" argument to read_line() here, even though we
				// are not interested in the individual sensor readings.
				unsigned int position = read_line();
 42a:	b7 de       	rcall	.-658    	; 0x19a <read_line>
				//sprintf(str, "Position %d", position);
				
				//puts(str);
				
				// The "proportional" term should be 0 when we are on the line.
				int proportional = ((int)position) - 2600;
 42c:	8c 01       	movw	r16, r24
 42e:	08 52       	subi	r16, 0x28	; 40
 430:	1a 40       	sbci	r17, 0x0A	; 10
				//puts(str);

				// Compute the derivative (change) and integral (sum) of the
				// position.
				int derivative = proportional - last_proportional;
				integral += proportional;
 432:	c8 01       	movw	r24, r16
 434:	aa 27       	eor	r26, r26
 436:	97 fd       	sbrc	r25, 7
 438:	a0 95       	com	r26
 43a:	ba 2f       	mov	r27, r26
 43c:	c8 0e       	add	r12, r24
 43e:	d9 1e       	adc	r13, r25
 440:	ea 1e       	adc	r14, r26
 442:	fb 1e       	adc	r15, r27
				// Compute the difference between the two motor power settings,
				// m1 - m2.  If this is a positive number the robot will turn
				// to the right.  If it is a negative number, the robot will
				// turn to the left, and the magnitude of the number determines
				// the sharpness of the turn.
				int power_difference = proportional/40 + derivative*3/2 + integral/10000;
 444:	c8 01       	movw	r24, r16
 446:	b1 01       	movw	r22, r2
 448:	00 d2       	rcall	.+1024   	; 0x84a <__divmodhi4>
				
				//puts(str);

				// Compute the derivative (change) and integral (sum) of the
				// position.
				int derivative = proportional - last_proportional;
 44a:	c8 01       	movw	r24, r16
 44c:	8a 19       	sub	r24, r10
 44e:	9b 09       	sbc	r25, r11
				// Compute the difference between the two motor power settings,
				// m1 - m2.  If this is a positive number the robot will turn
				// to the right.  If it is a negative number, the robot will
				// turn to the left, and the magnitude of the number determines
				// the sharpness of the turn.
				int power_difference = proportional/40 + derivative*3/2 + integral/10000;
 450:	5c 01       	movw	r10, r24
 452:	aa 0c       	add	r10, r10
 454:	bb 1c       	adc	r11, r11
 456:	8a 0d       	add	r24, r10
 458:	9b 1d       	adc	r25, r11
 45a:	99 23       	and	r25, r25
 45c:	0c f4       	brge	.+2      	; 0x460 <main+0x15a>
 45e:	01 96       	adiw	r24, 0x01	; 1
 460:	5c 01       	movw	r10, r24
 462:	b5 94       	asr	r11
 464:	a7 94       	ror	r10
 466:	a6 0e       	add	r10, r22
 468:	b7 1e       	adc	r11, r23
 46a:	c7 01       	movw	r24, r14
 46c:	b6 01       	movw	r22, r12
 46e:	a3 01       	movw	r20, r6
 470:	92 01       	movw	r18, r4
 472:	20 d2       	rcall	.+1088   	; 0x8b4 <__divmodsi4>
 474:	2a 0d       	add	r18, r10
 476:	3b 1d       	adc	r19, r11
 478:	25 36       	cpi	r18, 0x65	; 101
 47a:	31 05       	cpc	r19, r1
 47c:	14 f0       	brlt	.+4      	; 0x482 <main+0x17c>
 47e:	24 e6       	ldi	r18, 0x64	; 100
 480:	30 e0       	ldi	r19, 0x00	; 0
 482:	c9 01       	movw	r24, r18
 484:	8c 39       	cpi	r24, 0x9C	; 156
 486:	3f ef       	ldi	r19, 0xFF	; 255
 488:	93 07       	cpc	r25, r19
 48a:	14 f4       	brge	.+4      	; 0x490 <main+0x18a>
 48c:	8c e9       	ldi	r24, 0x9C	; 156
 48e:	9f ef       	ldi	r25, 0xFF	; 255
				if(power_difference > max)
				power_difference = max;
				if(power_difference < -max)
				power_difference = -max;

				if(power_difference < 0)
 490:	99 23       	and	r25, r25
 492:	3c f4       	brge	.+14     	; 0x4a2 <main+0x19c>
				setMotors(max,max+power_difference,1,1);
 494:	68 2f       	mov	r22, r24
 496:	6c 59       	subi	r22, 0x9C	; 156
 498:	21 e0       	ldi	r18, 0x01	; 1
 49a:	41 e0       	ldi	r20, 0x01	; 1
 49c:	89 2d       	mov	r24, r9
 49e:	2d de       	rcall	.-934    	; 0xfa <setMotors>
 4a0:	07 c0       	rjmp	.+14     	; 0x4b0 <main+0x1aa>
				else
				setMotors(max-power_difference, max, 1,1);
 4a2:	21 e0       	ldi	r18, 0x01	; 1
 4a4:	41 e0       	ldi	r20, 0x01	; 1
 4a6:	69 2d       	mov	r22, r9
 4a8:	39 2d       	mov	r19, r9
 4aa:	38 1b       	sub	r19, r24
 4ac:	83 2f       	mov	r24, r19
 4ae:	25 de       	rcall	.-950    	; 0xfa <setMotors>
				
				
				sum = sensor0 + sensor1 + sensor2 + sensor3 + sensor4 + sensor5;
 4b0:	20 91 3c 01 	lds	r18, 0x013C
 4b4:	30 91 3d 01 	lds	r19, 0x013D
 4b8:	80 91 3e 01 	lds	r24, 0x013E
 4bc:	90 91 3f 01 	lds	r25, 0x013F
 4c0:	82 0f       	add	r24, r18
 4c2:	93 1f       	adc	r25, r19
 4c4:	20 91 3a 01 	lds	r18, 0x013A
 4c8:	30 91 3b 01 	lds	r19, 0x013B
 4cc:	82 0f       	add	r24, r18
 4ce:	93 1f       	adc	r25, r19
 4d0:	20 91 38 01 	lds	r18, 0x0138
 4d4:	30 91 39 01 	lds	r19, 0x0139
 4d8:	82 0f       	add	r24, r18
 4da:	93 1f       	adc	r25, r19
 4dc:	20 91 36 01 	lds	r18, 0x0136
 4e0:	30 91 37 01 	lds	r19, 0x0137
 4e4:	82 0f       	add	r24, r18
 4e6:	93 1f       	adc	r25, r19
 4e8:	20 91 34 01 	lds	r18, 0x0134
 4ec:	30 91 35 01 	lds	r19, 0x0135
 4f0:	82 0f       	add	r24, r18
 4f2:	93 1f       	adc	r25, r19
 4f4:	90 93 33 01 	sts	0x0133, r25
 4f8:	80 93 32 01 	sts	0x0132, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4fc:	8f ec       	ldi	r24, 0xCF	; 207
 4fe:	97 e0       	ldi	r25, 0x07	; 7
 500:	01 97       	sbiw	r24, 0x01	; 1
 502:	f1 f7       	brne	.-4      	; 0x500 <main+0x1fa>
 504:	00 c0       	rjmp	.+0      	; 0x506 <main+0x200>
 506:	00 00       	nop
				// position.
				int derivative = proportional - last_proportional;
				integral += proportional;

				// Remember the last position.
				last_proportional = proportional;
 508:	58 01       	movw	r10, r16
 50a:	8f cf       	rjmp	.-226    	; 0x42a <main+0x124>
				
				
			}
		}
	
	if (fromPC == '2')
 50c:	82 33       	cpi	r24, 0x32	; 50
 50e:	09 f0       	breq	.+2      	; 0x512 <main+0x20c>
 510:	87 c0       	rjmp	.+270    	; 0x620 <main+0x31a>
 512:	c1 2c       	mov	r12, r1
 514:	d1 2c       	mov	r13, r1
 516:	76 01       	movw	r14, r12
 518:	a1 2c       	mov	r10, r1
 51a:	b1 2c       	mov	r11, r1
			// Compute the difference between the two motor power settings,
			// m1 - m2.  If this is a positive number the robot will turn
			// to the right.  If it is a negative number, the robot will
			// turn to the left, and the magnitude of the number determines
			// the sharpness of the turn.
			int power_difference = proportional/40 + derivative*3/2 + integral/10000;
 51c:	0f 2e       	mov	r0, r31
 51e:	f8 e2       	ldi	r31, 0x28	; 40
 520:	2f 2e       	mov	r2, r31
 522:	31 2c       	mov	r3, r1
 524:	f0 2d       	mov	r31, r0
 526:	0f 2e       	mov	r0, r31
 528:	f0 e1       	ldi	r31, 0x10	; 16
 52a:	4f 2e       	mov	r4, r31
 52c:	f7 e2       	ldi	r31, 0x27	; 39
 52e:	5f 2e       	mov	r5, r31
 530:	61 2c       	mov	r6, r1
 532:	71 2c       	mov	r7, r1
 534:	f0 2d       	mov	r31, r0
			power_difference = -max;

			if(power_difference < 0)
			setMotors(max,max+power_difference,1,1);
			else
			setMotors(max-power_difference, max, 1,1);
 536:	0f 2e       	mov	r0, r31
 538:	f6 e9       	ldi	r31, 0x96	; 150
 53a:	9f 2e       	mov	r9, r31
 53c:	f0 2d       	mov	r31, r0
		while(1)
		{
			// Get the position of the line.  Note that we *must* provide
			// the "sensors" argument to read_line() here, even though we
			// are not interested in the individual sensor readings.
			unsigned int position = read_line();
 53e:	2d de       	rcall	.-934    	; 0x19a <read_line>
			//sprintf(str, "Position %d", position);
			
			//puts(str);
			
			// The "proportional" term should be 0 when we are on the line.
			int proportional = ((int)position) - 2600;
 540:	8c 01       	movw	r16, r24
 542:	08 52       	subi	r16, 0x28	; 40
 544:	1a 40       	sbci	r17, 0x0A	; 10
			//puts(str);

			// Compute the derivative (change) and integral (sum) of the
			// position.
			int derivative = proportional - last_proportional;
			integral += proportional;
 546:	c8 01       	movw	r24, r16
 548:	aa 27       	eor	r26, r26
 54a:	97 fd       	sbrc	r25, 7
 54c:	a0 95       	com	r26
 54e:	ba 2f       	mov	r27, r26
 550:	c8 0e       	add	r12, r24
 552:	d9 1e       	adc	r13, r25
 554:	ea 1e       	adc	r14, r26
 556:	fb 1e       	adc	r15, r27
			// Compute the difference between the two motor power settings,
			// m1 - m2.  If this is a positive number the robot will turn
			// to the right.  If it is a negative number, the robot will
			// turn to the left, and the magnitude of the number determines
			// the sharpness of the turn.
			int power_difference = proportional/40 + derivative*3/2 + integral/10000;
 558:	c8 01       	movw	r24, r16
 55a:	b1 01       	movw	r22, r2
 55c:	76 d1       	rcall	.+748    	; 0x84a <__divmodhi4>
			
			//puts(str);

			// Compute the derivative (change) and integral (sum) of the
			// position.
			int derivative = proportional - last_proportional;
 55e:	c8 01       	movw	r24, r16
 560:	8a 19       	sub	r24, r10
 562:	9b 09       	sbc	r25, r11
			// Compute the difference between the two motor power settings,
			// m1 - m2.  If this is a positive number the robot will turn
			// to the right.  If it is a negative number, the robot will
			// turn to the left, and the magnitude of the number determines
			// the sharpness of the turn.
			int power_difference = proportional/40 + derivative*3/2 + integral/10000;
 564:	5c 01       	movw	r10, r24
 566:	aa 0c       	add	r10, r10
 568:	bb 1c       	adc	r11, r11
 56a:	8a 0d       	add	r24, r10
 56c:	9b 1d       	adc	r25, r11
 56e:	99 23       	and	r25, r25
 570:	0c f4       	brge	.+2      	; 0x574 <main+0x26e>
 572:	01 96       	adiw	r24, 0x01	; 1
 574:	5c 01       	movw	r10, r24
 576:	b5 94       	asr	r11
 578:	a7 94       	ror	r10
 57a:	a6 0e       	add	r10, r22
 57c:	b7 1e       	adc	r11, r23
 57e:	c7 01       	movw	r24, r14
 580:	b6 01       	movw	r22, r12
 582:	a3 01       	movw	r20, r6
 584:	92 01       	movw	r18, r4
 586:	96 d1       	rcall	.+812    	; 0x8b4 <__divmodsi4>
 588:	2a 0d       	add	r18, r10
 58a:	3b 1d       	adc	r19, r11
 58c:	27 39       	cpi	r18, 0x97	; 151
 58e:	31 05       	cpc	r19, r1
 590:	14 f0       	brlt	.+4      	; 0x596 <main+0x290>
 592:	26 e9       	ldi	r18, 0x96	; 150
 594:	30 e0       	ldi	r19, 0x00	; 0
 596:	c9 01       	movw	r24, r18
 598:	8a 36       	cpi	r24, 0x6A	; 106
 59a:	2f ef       	ldi	r18, 0xFF	; 255
 59c:	92 07       	cpc	r25, r18
 59e:	14 f4       	brge	.+4      	; 0x5a4 <main+0x29e>
 5a0:	8a e6       	ldi	r24, 0x6A	; 106
 5a2:	9f ef       	ldi	r25, 0xFF	; 255
			if(power_difference > max)
			power_difference = max;
			if(power_difference < -max)
			power_difference = -max;

			if(power_difference < 0)
 5a4:	99 23       	and	r25, r25
 5a6:	3c f4       	brge	.+14     	; 0x5b6 <main+0x2b0>
			setMotors(max,max+power_difference,1,1);
 5a8:	68 2f       	mov	r22, r24
 5aa:	6a 56       	subi	r22, 0x6A	; 106
 5ac:	21 e0       	ldi	r18, 0x01	; 1
 5ae:	41 e0       	ldi	r20, 0x01	; 1
 5b0:	89 2d       	mov	r24, r9
 5b2:	a3 dd       	rcall	.-1210   	; 0xfa <setMotors>
 5b4:	07 c0       	rjmp	.+14     	; 0x5c4 <main+0x2be>
			else
			setMotors(max-power_difference, max, 1,1);
 5b6:	21 e0       	ldi	r18, 0x01	; 1
 5b8:	41 e0       	ldi	r20, 0x01	; 1
 5ba:	69 2d       	mov	r22, r9
 5bc:	39 2d       	mov	r19, r9
 5be:	38 1b       	sub	r19, r24
 5c0:	83 2f       	mov	r24, r19
 5c2:	9b dd       	rcall	.-1226   	; 0xfa <setMotors>
			
			
			sum = sensor0 + sensor1 + sensor2 + sensor3 + sensor4 + sensor5;
 5c4:	20 91 3c 01 	lds	r18, 0x013C
 5c8:	30 91 3d 01 	lds	r19, 0x013D
 5cc:	80 91 3e 01 	lds	r24, 0x013E
 5d0:	90 91 3f 01 	lds	r25, 0x013F
 5d4:	82 0f       	add	r24, r18
 5d6:	93 1f       	adc	r25, r19
 5d8:	20 91 3a 01 	lds	r18, 0x013A
 5dc:	30 91 3b 01 	lds	r19, 0x013B
 5e0:	82 0f       	add	r24, r18
 5e2:	93 1f       	adc	r25, r19
 5e4:	20 91 38 01 	lds	r18, 0x0138
 5e8:	30 91 39 01 	lds	r19, 0x0139
 5ec:	82 0f       	add	r24, r18
 5ee:	93 1f       	adc	r25, r19
 5f0:	20 91 36 01 	lds	r18, 0x0136
 5f4:	30 91 37 01 	lds	r19, 0x0137
 5f8:	82 0f       	add	r24, r18
 5fa:	93 1f       	adc	r25, r19
 5fc:	20 91 34 01 	lds	r18, 0x0134
 600:	30 91 35 01 	lds	r19, 0x0135
 604:	82 0f       	add	r24, r18
 606:	93 1f       	adc	r25, r19
 608:	90 93 33 01 	sts	0x0133, r25
 60c:	80 93 32 01 	sts	0x0132, r24
 610:	8f ec       	ldi	r24, 0xCF	; 207
 612:	97 e0       	ldi	r25, 0x07	; 7
 614:	01 97       	sbiw	r24, 0x01	; 1
 616:	f1 f7       	brne	.-4      	; 0x614 <main+0x30e>
 618:	00 c0       	rjmp	.+0      	; 0x61a <main+0x314>
 61a:	00 00       	nop
			// position.
			int derivative = proportional - last_proportional;
			integral += proportional;

			// Remember the last position.
			last_proportional = proportional;
 61c:	58 01       	movw	r10, r16
 61e:	8f cf       	rjmp	.-226    	; 0x53e <main+0x238>
			
			
		}
	}
	
	if (fromPC == '3')
 620:	83 33       	cpi	r24, 0x33	; 51
 622:	09 f0       	breq	.+2      	; 0x626 <main+0x320>
 624:	87 c0       	rjmp	.+270    	; 0x734 <main+0x42e>
 626:	c1 2c       	mov	r12, r1
 628:	d1 2c       	mov	r13, r1
 62a:	76 01       	movw	r14, r12
 62c:	a1 2c       	mov	r10, r1
 62e:	b1 2c       	mov	r11, r1
			// Compute the difference between the two motor power settings,
			// m1 - m2.  If this is a positive number the robot will turn
			// to the right.  If it is a negative number, the robot will
			// turn to the left, and the magnitude of the number determines
			// the sharpness of the turn.
			int power_difference = proportional/20 + derivative*3/2 + integral/10000;
 630:	0f 2e       	mov	r0, r31
 632:	f4 e1       	ldi	r31, 0x14	; 20
 634:	2f 2e       	mov	r2, r31
 636:	31 2c       	mov	r3, r1
 638:	f0 2d       	mov	r31, r0
 63a:	0f 2e       	mov	r0, r31
 63c:	f0 e1       	ldi	r31, 0x10	; 16
 63e:	4f 2e       	mov	r4, r31
 640:	f7 e2       	ldi	r31, 0x27	; 39
 642:	5f 2e       	mov	r5, r31
 644:	61 2c       	mov	r6, r1
 646:	71 2c       	mov	r7, r1
 648:	f0 2d       	mov	r31, r0
			power_difference = -max;

			if(power_difference < 0)
			setMotors(max,max+power_difference,1,1);
			else
			setMotors(max-power_difference, max, 1,1);
 64a:	0f 2e       	mov	r0, r31
 64c:	f4 e6       	ldi	r31, 0x64	; 100
 64e:	9f 2e       	mov	r9, r31
 650:	f0 2d       	mov	r31, r0
		while(1)
		{
			// Get the position of the line.  Note that we *must* provide
			// the "sensors" argument to read_line() here, even though we
			// are not interested in the individual sensor readings.
			unsigned int position = read_line();
 652:	a3 dd       	rcall	.-1210   	; 0x19a <read_line>
			//sprintf(str, "Position %d", position);
			
			//puts(str);
			
			// The "proportional" term should be 0 when we are on the line.
			int proportional = ((int)position) - 2600;
 654:	8c 01       	movw	r16, r24
 656:	08 52       	subi	r16, 0x28	; 40
 658:	1a 40       	sbci	r17, 0x0A	; 10
			//puts(str);

			// Compute the derivative (change) and integral (sum) of the
			// position.
			int derivative = proportional - last_proportional;
			integral += proportional;
 65a:	c8 01       	movw	r24, r16
 65c:	aa 27       	eor	r26, r26
 65e:	97 fd       	sbrc	r25, 7
 660:	a0 95       	com	r26
 662:	ba 2f       	mov	r27, r26
 664:	c8 0e       	add	r12, r24
 666:	d9 1e       	adc	r13, r25
 668:	ea 1e       	adc	r14, r26
 66a:	fb 1e       	adc	r15, r27
			// Compute the difference between the two motor power settings,
			// m1 - m2.  If this is a positive number the robot will turn
			// to the right.  If it is a negative number, the robot will
			// turn to the left, and the magnitude of the number determines
			// the sharpness of the turn.
			int power_difference = proportional/20 + derivative*3/2 + integral/10000;
 66c:	c8 01       	movw	r24, r16
 66e:	b1 01       	movw	r22, r2
 670:	ec d0       	rcall	.+472    	; 0x84a <__divmodhi4>
			
			//puts(str);

			// Compute the derivative (change) and integral (sum) of the
			// position.
			int derivative = proportional - last_proportional;
 672:	c8 01       	movw	r24, r16
 674:	8a 19       	sub	r24, r10
 676:	9b 09       	sbc	r25, r11
			// Compute the difference between the two motor power settings,
			// m1 - m2.  If this is a positive number the robot will turn
			// to the right.  If it is a negative number, the robot will
			// turn to the left, and the magnitude of the number determines
			// the sharpness of the turn.
			int power_difference = proportional/20 + derivative*3/2 + integral/10000;
 678:	5c 01       	movw	r10, r24
 67a:	aa 0c       	add	r10, r10
 67c:	bb 1c       	adc	r11, r11
 67e:	8a 0d       	add	r24, r10
 680:	9b 1d       	adc	r25, r11
 682:	99 23       	and	r25, r25
 684:	0c f4       	brge	.+2      	; 0x688 <main+0x382>
 686:	01 96       	adiw	r24, 0x01	; 1
 688:	5c 01       	movw	r10, r24
 68a:	b5 94       	asr	r11
 68c:	a7 94       	ror	r10
 68e:	a6 0e       	add	r10, r22
 690:	b7 1e       	adc	r11, r23
 692:	c7 01       	movw	r24, r14
 694:	b6 01       	movw	r22, r12
 696:	a3 01       	movw	r20, r6
 698:	92 01       	movw	r18, r4
 69a:	0c d1       	rcall	.+536    	; 0x8b4 <__divmodsi4>
 69c:	2a 0d       	add	r18, r10
 69e:	3b 1d       	adc	r19, r11
 6a0:	25 36       	cpi	r18, 0x65	; 101
 6a2:	31 05       	cpc	r19, r1
 6a4:	14 f0       	brlt	.+4      	; 0x6aa <main+0x3a4>
 6a6:	24 e6       	ldi	r18, 0x64	; 100
 6a8:	30 e0       	ldi	r19, 0x00	; 0
 6aa:	c9 01       	movw	r24, r18
 6ac:	8c 39       	cpi	r24, 0x9C	; 156
 6ae:	2f ef       	ldi	r18, 0xFF	; 255
 6b0:	92 07       	cpc	r25, r18
 6b2:	14 f4       	brge	.+4      	; 0x6b8 <main+0x3b2>
 6b4:	8c e9       	ldi	r24, 0x9C	; 156
 6b6:	9f ef       	ldi	r25, 0xFF	; 255
			if(power_difference > max)
			power_difference = max;
			if(power_difference < -max)
			power_difference = -max;

			if(power_difference < 0)
 6b8:	99 23       	and	r25, r25
 6ba:	3c f4       	brge	.+14     	; 0x6ca <main+0x3c4>
			setMotors(max,max+power_difference,1,1);
 6bc:	68 2f       	mov	r22, r24
 6be:	6c 59       	subi	r22, 0x9C	; 156
 6c0:	21 e0       	ldi	r18, 0x01	; 1
 6c2:	41 e0       	ldi	r20, 0x01	; 1
 6c4:	89 2d       	mov	r24, r9
 6c6:	19 dd       	rcall	.-1486   	; 0xfa <setMotors>
 6c8:	07 c0       	rjmp	.+14     	; 0x6d8 <main+0x3d2>
			else
			setMotors(max-power_difference, max, 1,1);
 6ca:	21 e0       	ldi	r18, 0x01	; 1
 6cc:	41 e0       	ldi	r20, 0x01	; 1
 6ce:	69 2d       	mov	r22, r9
 6d0:	39 2d       	mov	r19, r9
 6d2:	38 1b       	sub	r19, r24
 6d4:	83 2f       	mov	r24, r19
 6d6:	11 dd       	rcall	.-1502   	; 0xfa <setMotors>
			
			
			sum = sensor0 + sensor1 + sensor2 + sensor3 + sensor4 + sensor5;
 6d8:	20 91 3c 01 	lds	r18, 0x013C
 6dc:	30 91 3d 01 	lds	r19, 0x013D
 6e0:	80 91 3e 01 	lds	r24, 0x013E
 6e4:	90 91 3f 01 	lds	r25, 0x013F
 6e8:	82 0f       	add	r24, r18
 6ea:	93 1f       	adc	r25, r19
 6ec:	20 91 3a 01 	lds	r18, 0x013A
 6f0:	30 91 3b 01 	lds	r19, 0x013B
 6f4:	82 0f       	add	r24, r18
 6f6:	93 1f       	adc	r25, r19
 6f8:	20 91 38 01 	lds	r18, 0x0138
 6fc:	30 91 39 01 	lds	r19, 0x0139
 700:	82 0f       	add	r24, r18
 702:	93 1f       	adc	r25, r19
 704:	20 91 36 01 	lds	r18, 0x0136
 708:	30 91 37 01 	lds	r19, 0x0137
 70c:	82 0f       	add	r24, r18
 70e:	93 1f       	adc	r25, r19
 710:	20 91 34 01 	lds	r18, 0x0134
 714:	30 91 35 01 	lds	r19, 0x0135
 718:	82 0f       	add	r24, r18
 71a:	93 1f       	adc	r25, r19
 71c:	90 93 33 01 	sts	0x0133, r25
 720:	80 93 32 01 	sts	0x0132, r24
 724:	8f ec       	ldi	r24, 0xCF	; 207
 726:	97 e0       	ldi	r25, 0x07	; 7
 728:	01 97       	sbiw	r24, 0x01	; 1
 72a:	f1 f7       	brne	.-4      	; 0x728 <main+0x422>
 72c:	00 c0       	rjmp	.+0      	; 0x72e <main+0x428>
 72e:	00 00       	nop
			// position.
			int derivative = proportional - last_proportional;
			integral += proportional;

			// Remember the last position.
			last_proportional = proportional;
 730:	58 01       	movw	r10, r16
 732:	8f cf       	rjmp	.-226    	; 0x652 <main+0x34c>
			
			
		}
	}
	
		if (fromPC == '4')
 734:	84 33       	cpi	r24, 0x34	; 52
 736:	09 f0       	breq	.+2      	; 0x73a <main+0x434>
 738:	fb cd       	rjmp	.-1034   	; 0x330 <main+0x2a>
 73a:	c1 2c       	mov	r12, r1
 73c:	d1 2c       	mov	r13, r1
 73e:	76 01       	movw	r14, r12
 740:	a1 2c       	mov	r10, r1
 742:	b1 2c       	mov	r11, r1
				// Compute the difference between the two motor power settings,
				// m1 - m2.  If this is a positive number the robot will turn
				// to the right.  If it is a negative number, the robot will
				// turn to the left, and the magnitude of the number determines
				// the sharpness of the turn.
				int power_difference = proportional/20 + derivative*3/2 + integral/10000;
 744:	0f 2e       	mov	r0, r31
 746:	f4 e1       	ldi	r31, 0x14	; 20
 748:	2f 2e       	mov	r2, r31
 74a:	31 2c       	mov	r3, r1
 74c:	f0 2d       	mov	r31, r0
 74e:	0f 2e       	mov	r0, r31
 750:	f0 e1       	ldi	r31, 0x10	; 16
 752:	4f 2e       	mov	r4, r31
 754:	f7 e2       	ldi	r31, 0x27	; 39
 756:	5f 2e       	mov	r5, r31
 758:	61 2c       	mov	r6, r1
 75a:	71 2c       	mov	r7, r1
 75c:	f0 2d       	mov	r31, r0
				power_difference = -max;

				if(power_difference < 0)
				setMotors(max,max+power_difference,1,1);
				else
				setMotors(max-power_difference, max, 1,1);
 75e:	0f 2e       	mov	r0, r31
 760:	f4 e6       	ldi	r31, 0x64	; 100
 762:	9f 2e       	mov	r9, r31
 764:	f0 2d       	mov	r31, r0
			while(1)
			{
				// Get the position of the line.  Note that we *must* provide
				// the "sensors" argument to read_line() here, even though we
				// are not interested in the individual sensor readings.
				unsigned int position = read_line();
 766:	19 dd       	rcall	.-1486   	; 0x19a <read_line>
				//sprintf(str, "Position %d", position);
				
				//puts(str);
				
				// The "proportional" term should be 0 when we are on the line.
				int proportional = ((int)position) - 3800;
 768:	8c 01       	movw	r16, r24
 76a:	08 5d       	subi	r16, 0xD8	; 216
 76c:	1e 40       	sbci	r17, 0x0E	; 14
				//puts(str);

				// Compute the derivative (change) and integral (sum) of the
				// position.
				int derivative = proportional - last_proportional;
				integral += proportional;
 76e:	c8 01       	movw	r24, r16
 770:	aa 27       	eor	r26, r26
 772:	97 fd       	sbrc	r25, 7
 774:	a0 95       	com	r26
 776:	ba 2f       	mov	r27, r26
 778:	c8 0e       	add	r12, r24
 77a:	d9 1e       	adc	r13, r25
 77c:	ea 1e       	adc	r14, r26
 77e:	fb 1e       	adc	r15, r27
				// Compute the difference between the two motor power settings,
				// m1 - m2.  If this is a positive number the robot will turn
				// to the right.  If it is a negative number, the robot will
				// turn to the left, and the magnitude of the number determines
				// the sharpness of the turn.
				int power_difference = proportional/20 + derivative*3/2 + integral/10000;
 780:	c8 01       	movw	r24, r16
 782:	b1 01       	movw	r22, r2
 784:	62 d0       	rcall	.+196    	; 0x84a <__divmodhi4>
				
				//puts(str);

				// Compute the derivative (change) and integral (sum) of the
				// position.
				int derivative = proportional - last_proportional;
 786:	c8 01       	movw	r24, r16
 788:	8a 19       	sub	r24, r10
 78a:	9b 09       	sbc	r25, r11
				// Compute the difference between the two motor power settings,
				// m1 - m2.  If this is a positive number the robot will turn
				// to the right.  If it is a negative number, the robot will
				// turn to the left, and the magnitude of the number determines
				// the sharpness of the turn.
				int power_difference = proportional/20 + derivative*3/2 + integral/10000;
 78c:	5c 01       	movw	r10, r24
 78e:	aa 0c       	add	r10, r10
 790:	bb 1c       	adc	r11, r11
 792:	8a 0d       	add	r24, r10
 794:	9b 1d       	adc	r25, r11
 796:	99 23       	and	r25, r25
 798:	0c f4       	brge	.+2      	; 0x79c <main+0x496>
 79a:	01 96       	adiw	r24, 0x01	; 1
 79c:	5c 01       	movw	r10, r24
 79e:	b5 94       	asr	r11
 7a0:	a7 94       	ror	r10
 7a2:	a6 0e       	add	r10, r22
 7a4:	b7 1e       	adc	r11, r23
 7a6:	c7 01       	movw	r24, r14
 7a8:	b6 01       	movw	r22, r12
 7aa:	a3 01       	movw	r20, r6
 7ac:	92 01       	movw	r18, r4
 7ae:	82 d0       	rcall	.+260    	; 0x8b4 <__divmodsi4>
 7b0:	2a 0d       	add	r18, r10
 7b2:	3b 1d       	adc	r19, r11
 7b4:	25 36       	cpi	r18, 0x65	; 101
 7b6:	31 05       	cpc	r19, r1
 7b8:	14 f0       	brlt	.+4      	; 0x7be <main+0x4b8>
 7ba:	24 e6       	ldi	r18, 0x64	; 100
 7bc:	30 e0       	ldi	r19, 0x00	; 0
 7be:	c9 01       	movw	r24, r18
 7c0:	8c 39       	cpi	r24, 0x9C	; 156
 7c2:	2f ef       	ldi	r18, 0xFF	; 255
 7c4:	92 07       	cpc	r25, r18
 7c6:	14 f4       	brge	.+4      	; 0x7cc <main+0x4c6>
 7c8:	8c e9       	ldi	r24, 0x9C	; 156
 7ca:	9f ef       	ldi	r25, 0xFF	; 255
				if(power_difference > max)
				power_difference = max;
				if(power_difference < -max)
				power_difference = -max;

				if(power_difference < 0)
 7cc:	99 23       	and	r25, r25
 7ce:	3c f4       	brge	.+14     	; 0x7de <main+0x4d8>
				setMotors(max,max+power_difference,1,1);
 7d0:	68 2f       	mov	r22, r24
 7d2:	6c 59       	subi	r22, 0x9C	; 156
 7d4:	21 e0       	ldi	r18, 0x01	; 1
 7d6:	41 e0       	ldi	r20, 0x01	; 1
 7d8:	89 2d       	mov	r24, r9
 7da:	8f dc       	rcall	.-1762   	; 0xfa <setMotors>
 7dc:	07 c0       	rjmp	.+14     	; 0x7ec <main+0x4e6>
				else
				setMotors(max-power_difference, max, 1,1);
 7de:	21 e0       	ldi	r18, 0x01	; 1
 7e0:	41 e0       	ldi	r20, 0x01	; 1
 7e2:	69 2d       	mov	r22, r9
 7e4:	39 2d       	mov	r19, r9
 7e6:	38 1b       	sub	r19, r24
 7e8:	83 2f       	mov	r24, r19
 7ea:	87 dc       	rcall	.-1778   	; 0xfa <setMotors>
				
				
				sum = sensor0 + sensor1 + sensor2 + sensor3 + sensor4 + sensor5;
 7ec:	20 91 3c 01 	lds	r18, 0x013C
 7f0:	30 91 3d 01 	lds	r19, 0x013D
 7f4:	80 91 3e 01 	lds	r24, 0x013E
 7f8:	90 91 3f 01 	lds	r25, 0x013F
 7fc:	82 0f       	add	r24, r18
 7fe:	93 1f       	adc	r25, r19
 800:	20 91 3a 01 	lds	r18, 0x013A
 804:	30 91 3b 01 	lds	r19, 0x013B
 808:	82 0f       	add	r24, r18
 80a:	93 1f       	adc	r25, r19
 80c:	20 91 38 01 	lds	r18, 0x0138
 810:	30 91 39 01 	lds	r19, 0x0139
 814:	82 0f       	add	r24, r18
 816:	93 1f       	adc	r25, r19
 818:	20 91 36 01 	lds	r18, 0x0136
 81c:	30 91 37 01 	lds	r19, 0x0137
 820:	82 0f       	add	r24, r18
 822:	93 1f       	adc	r25, r19
 824:	20 91 34 01 	lds	r18, 0x0134
 828:	30 91 35 01 	lds	r19, 0x0135
 82c:	82 0f       	add	r24, r18
 82e:	93 1f       	adc	r25, r19
 830:	90 93 33 01 	sts	0x0133, r25
 834:	80 93 32 01 	sts	0x0132, r24
 838:	8f ec       	ldi	r24, 0xCF	; 207
 83a:	97 e0       	ldi	r25, 0x07	; 7
 83c:	01 97       	sbiw	r24, 0x01	; 1
 83e:	f1 f7       	brne	.-4      	; 0x83c <main+0x536>
 840:	00 c0       	rjmp	.+0      	; 0x842 <main+0x53c>
 842:	00 00       	nop
				// position.
				int derivative = proportional - last_proportional;
				integral += proportional;

				// Remember the last position.
				last_proportional = proportional;
 844:	58 01       	movw	r10, r16
 846:	8f cf       	rjmp	.-226    	; 0x766 <main+0x460>

00000848 <board_init>:
#include <compiler.h>
#include <conf_board.h>


void board_init(void)
{
 848:	08 95       	ret

0000084a <__divmodhi4>:
 84a:	97 fb       	bst	r25, 7
 84c:	07 2e       	mov	r0, r23
 84e:	16 f4       	brtc	.+4      	; 0x854 <__divmodhi4+0xa>
 850:	00 94       	com	r0
 852:	06 d0       	rcall	.+12     	; 0x860 <__divmodhi4_neg1>
 854:	77 fd       	sbrc	r23, 7
 856:	08 d0       	rcall	.+16     	; 0x868 <__divmodhi4_neg2>
 858:	4e d0       	rcall	.+156    	; 0x8f6 <__udivmodhi4>
 85a:	07 fc       	sbrc	r0, 7
 85c:	05 d0       	rcall	.+10     	; 0x868 <__divmodhi4_neg2>
 85e:	3e f4       	brtc	.+14     	; 0x86e <__divmodhi4_exit>

00000860 <__divmodhi4_neg1>:
 860:	90 95       	com	r25
 862:	81 95       	neg	r24
 864:	9f 4f       	sbci	r25, 0xFF	; 255
 866:	08 95       	ret

00000868 <__divmodhi4_neg2>:
 868:	70 95       	com	r23
 86a:	61 95       	neg	r22
 86c:	7f 4f       	sbci	r23, 0xFF	; 255

0000086e <__divmodhi4_exit>:
 86e:	08 95       	ret

00000870 <__udivmodsi4>:
 870:	a1 e2       	ldi	r26, 0x21	; 33
 872:	1a 2e       	mov	r1, r26
 874:	aa 1b       	sub	r26, r26
 876:	bb 1b       	sub	r27, r27
 878:	fd 01       	movw	r30, r26
 87a:	0d c0       	rjmp	.+26     	; 0x896 <__udivmodsi4_ep>

0000087c <__udivmodsi4_loop>:
 87c:	aa 1f       	adc	r26, r26
 87e:	bb 1f       	adc	r27, r27
 880:	ee 1f       	adc	r30, r30
 882:	ff 1f       	adc	r31, r31
 884:	a2 17       	cp	r26, r18
 886:	b3 07       	cpc	r27, r19
 888:	e4 07       	cpc	r30, r20
 88a:	f5 07       	cpc	r31, r21
 88c:	20 f0       	brcs	.+8      	; 0x896 <__udivmodsi4_ep>
 88e:	a2 1b       	sub	r26, r18
 890:	b3 0b       	sbc	r27, r19
 892:	e4 0b       	sbc	r30, r20
 894:	f5 0b       	sbc	r31, r21

00000896 <__udivmodsi4_ep>:
 896:	66 1f       	adc	r22, r22
 898:	77 1f       	adc	r23, r23
 89a:	88 1f       	adc	r24, r24
 89c:	99 1f       	adc	r25, r25
 89e:	1a 94       	dec	r1
 8a0:	69 f7       	brne	.-38     	; 0x87c <__udivmodsi4_loop>
 8a2:	60 95       	com	r22
 8a4:	70 95       	com	r23
 8a6:	80 95       	com	r24
 8a8:	90 95       	com	r25
 8aa:	9b 01       	movw	r18, r22
 8ac:	ac 01       	movw	r20, r24
 8ae:	bd 01       	movw	r22, r26
 8b0:	cf 01       	movw	r24, r30
 8b2:	08 95       	ret

000008b4 <__divmodsi4>:
 8b4:	05 2e       	mov	r0, r21
 8b6:	97 fb       	bst	r25, 7
 8b8:	16 f4       	brtc	.+4      	; 0x8be <__divmodsi4+0xa>
 8ba:	00 94       	com	r0
 8bc:	06 d0       	rcall	.+12     	; 0x8ca <__divmodsi4_neg1>
 8be:	57 fd       	sbrc	r21, 7
 8c0:	0c d0       	rcall	.+24     	; 0x8da <__divmodsi4_neg2>
 8c2:	d6 df       	rcall	.-84     	; 0x870 <__udivmodsi4>
 8c4:	07 fc       	sbrc	r0, 7
 8c6:	09 d0       	rcall	.+18     	; 0x8da <__divmodsi4_neg2>
 8c8:	7e f4       	brtc	.+30     	; 0x8e8 <__divmodsi4_exit>

000008ca <__divmodsi4_neg1>:
 8ca:	90 95       	com	r25
 8cc:	80 95       	com	r24
 8ce:	70 95       	com	r23
 8d0:	61 95       	neg	r22
 8d2:	7f 4f       	sbci	r23, 0xFF	; 255
 8d4:	8f 4f       	sbci	r24, 0xFF	; 255
 8d6:	9f 4f       	sbci	r25, 0xFF	; 255
 8d8:	08 95       	ret

000008da <__divmodsi4_neg2>:
 8da:	50 95       	com	r21
 8dc:	40 95       	com	r20
 8de:	30 95       	com	r19
 8e0:	21 95       	neg	r18
 8e2:	3f 4f       	sbci	r19, 0xFF	; 255
 8e4:	4f 4f       	sbci	r20, 0xFF	; 255
 8e6:	5f 4f       	sbci	r21, 0xFF	; 255

000008e8 <__divmodsi4_exit>:
 8e8:	08 95       	ret

000008ea <__mulshisi3>:
 8ea:	b7 ff       	sbrs	r27, 7
 8ec:	18 c0       	rjmp	.+48     	; 0x91e <__muluhisi3>

000008ee <__mulohisi3>:
 8ee:	17 d0       	rcall	.+46     	; 0x91e <__muluhisi3>
 8f0:	82 1b       	sub	r24, r18
 8f2:	93 0b       	sbc	r25, r19
 8f4:	08 95       	ret

000008f6 <__udivmodhi4>:
 8f6:	aa 1b       	sub	r26, r26
 8f8:	bb 1b       	sub	r27, r27
 8fa:	51 e1       	ldi	r21, 0x11	; 17
 8fc:	07 c0       	rjmp	.+14     	; 0x90c <__udivmodhi4_ep>

000008fe <__udivmodhi4_loop>:
 8fe:	aa 1f       	adc	r26, r26
 900:	bb 1f       	adc	r27, r27
 902:	a6 17       	cp	r26, r22
 904:	b7 07       	cpc	r27, r23
 906:	10 f0       	brcs	.+4      	; 0x90c <__udivmodhi4_ep>
 908:	a6 1b       	sub	r26, r22
 90a:	b7 0b       	sbc	r27, r23

0000090c <__udivmodhi4_ep>:
 90c:	88 1f       	adc	r24, r24
 90e:	99 1f       	adc	r25, r25
 910:	5a 95       	dec	r21
 912:	a9 f7       	brne	.-22     	; 0x8fe <__udivmodhi4_loop>
 914:	80 95       	com	r24
 916:	90 95       	com	r25
 918:	bc 01       	movw	r22, r24
 91a:	cd 01       	movw	r24, r26
 91c:	08 95       	ret

0000091e <__muluhisi3>:
 91e:	09 d0       	rcall	.+18     	; 0x932 <__umulhisi3>
 920:	a5 9f       	mul	r26, r21
 922:	90 0d       	add	r25, r0
 924:	b4 9f       	mul	r27, r20
 926:	90 0d       	add	r25, r0
 928:	a4 9f       	mul	r26, r20
 92a:	80 0d       	add	r24, r0
 92c:	91 1d       	adc	r25, r1
 92e:	11 24       	eor	r1, r1
 930:	08 95       	ret

00000932 <__umulhisi3>:
 932:	a2 9f       	mul	r26, r18
 934:	b0 01       	movw	r22, r0
 936:	b3 9f       	mul	r27, r19
 938:	c0 01       	movw	r24, r0
 93a:	a3 9f       	mul	r26, r19
 93c:	01 d0       	rcall	.+2      	; 0x940 <__umulhisi3+0xe>
 93e:	b2 9f       	mul	r27, r18
 940:	70 0d       	add	r23, r0
 942:	81 1d       	adc	r24, r1
 944:	11 24       	eor	r1, r1
 946:	91 1d       	adc	r25, r1
 948:	08 95       	ret

0000094a <puts>:
 94a:	0f 93       	push	r16
 94c:	1f 93       	push	r17
 94e:	cf 93       	push	r28
 950:	df 93       	push	r29
 952:	8c 01       	movw	r16, r24
 954:	e0 91 44 01 	lds	r30, 0x0144
 958:	f0 91 45 01 	lds	r31, 0x0145
 95c:	83 81       	ldd	r24, Z+3	; 0x03
 95e:	81 ff       	sbrs	r24, 1
 960:	1b c0       	rjmp	.+54     	; 0x998 <puts+0x4e>
 962:	c0 e0       	ldi	r28, 0x00	; 0
 964:	d0 e0       	ldi	r29, 0x00	; 0
 966:	05 c0       	rjmp	.+10     	; 0x972 <puts+0x28>
 968:	09 95       	icall
 96a:	89 2b       	or	r24, r25
 96c:	11 f0       	breq	.+4      	; 0x972 <puts+0x28>
 96e:	cf ef       	ldi	r28, 0xFF	; 255
 970:	df ef       	ldi	r29, 0xFF	; 255
 972:	f8 01       	movw	r30, r16
 974:	81 91       	ld	r24, Z+
 976:	8f 01       	movw	r16, r30
 978:	60 91 44 01 	lds	r22, 0x0144
 97c:	70 91 45 01 	lds	r23, 0x0145
 980:	db 01       	movw	r26, r22
 982:	18 96       	adiw	r26, 0x08	; 8
 984:	ed 91       	ld	r30, X+
 986:	fc 91       	ld	r31, X
 988:	19 97       	sbiw	r26, 0x09	; 9
 98a:	81 11       	cpse	r24, r1
 98c:	ed cf       	rjmp	.-38     	; 0x968 <puts+0x1e>
 98e:	8a e0       	ldi	r24, 0x0A	; 10
 990:	09 95       	icall
 992:	89 2b       	or	r24, r25
 994:	09 f4       	brne	.+2      	; 0x998 <puts+0x4e>
 996:	02 c0       	rjmp	.+4      	; 0x99c <puts+0x52>
 998:	cf ef       	ldi	r28, 0xFF	; 255
 99a:	df ef       	ldi	r29, 0xFF	; 255
 99c:	ce 01       	movw	r24, r28
 99e:	df 91       	pop	r29
 9a0:	cf 91       	pop	r28
 9a2:	1f 91       	pop	r17
 9a4:	0f 91       	pop	r16
 9a6:	08 95       	ret

000009a8 <sprintf>:
 9a8:	ae e0       	ldi	r26, 0x0E	; 14
 9aa:	b0 e0       	ldi	r27, 0x00	; 0
 9ac:	e9 ed       	ldi	r30, 0xD9	; 217
 9ae:	f4 e0       	ldi	r31, 0x04	; 4
 9b0:	95 c2       	rjmp	.+1322   	; 0xedc <__prologue_saves__+0x1c>
 9b2:	0d 89       	ldd	r16, Y+21	; 0x15
 9b4:	1e 89       	ldd	r17, Y+22	; 0x16
 9b6:	86 e0       	ldi	r24, 0x06	; 6
 9b8:	8c 83       	std	Y+4, r24	; 0x04
 9ba:	1a 83       	std	Y+2, r17	; 0x02
 9bc:	09 83       	std	Y+1, r16	; 0x01
 9be:	8f ef       	ldi	r24, 0xFF	; 255
 9c0:	9f e7       	ldi	r25, 0x7F	; 127
 9c2:	9e 83       	std	Y+6, r25	; 0x06
 9c4:	8d 83       	std	Y+5, r24	; 0x05
 9c6:	ce 01       	movw	r24, r28
 9c8:	49 96       	adiw	r24, 0x19	; 25
 9ca:	ac 01       	movw	r20, r24
 9cc:	6f 89       	ldd	r22, Y+23	; 0x17
 9ce:	78 8d       	ldd	r23, Y+24	; 0x18
 9d0:	ce 01       	movw	r24, r28
 9d2:	01 96       	adiw	r24, 0x01	; 1
 9d4:	08 d0       	rcall	.+16     	; 0x9e6 <vfprintf>
 9d6:	ef 81       	ldd	r30, Y+7	; 0x07
 9d8:	f8 85       	ldd	r31, Y+8	; 0x08
 9da:	e0 0f       	add	r30, r16
 9dc:	f1 1f       	adc	r31, r17
 9de:	10 82       	st	Z, r1
 9e0:	2e 96       	adiw	r28, 0x0e	; 14
 9e2:	e4 e0       	ldi	r30, 0x04	; 4
 9e4:	97 c2       	rjmp	.+1326   	; 0xf14 <__epilogue_restores__+0x1c>

000009e6 <vfprintf>:
 9e6:	ac e0       	ldi	r26, 0x0C	; 12
 9e8:	b0 e0       	ldi	r27, 0x00	; 0
 9ea:	e8 ef       	ldi	r30, 0xF8	; 248
 9ec:	f4 e0       	ldi	r31, 0x04	; 4
 9ee:	68 c2       	rjmp	.+1232   	; 0xec0 <__prologue_saves__>
 9f0:	7c 01       	movw	r14, r24
 9f2:	6b 01       	movw	r12, r22
 9f4:	8a 01       	movw	r16, r20
 9f6:	fc 01       	movw	r30, r24
 9f8:	17 82       	std	Z+7, r1	; 0x07
 9fa:	16 82       	std	Z+6, r1	; 0x06
 9fc:	83 81       	ldd	r24, Z+3	; 0x03
 9fe:	81 ff       	sbrs	r24, 1
 a00:	b9 c1       	rjmp	.+882    	; 0xd74 <vfprintf+0x38e>
 a02:	88 24       	eor	r8, r8
 a04:	83 94       	inc	r8
 a06:	91 2c       	mov	r9, r1
 a08:	8c 0e       	add	r8, r28
 a0a:	9d 1e       	adc	r9, r29
 a0c:	f7 01       	movw	r30, r14
 a0e:	93 81       	ldd	r25, Z+3	; 0x03
 a10:	f6 01       	movw	r30, r12
 a12:	93 fd       	sbrc	r25, 3
 a14:	85 91       	lpm	r24, Z+
 a16:	93 ff       	sbrs	r25, 3
 a18:	81 91       	ld	r24, Z+
 a1a:	6f 01       	movw	r12, r30
 a1c:	88 23       	and	r24, r24
 a1e:	09 f4       	brne	.+2      	; 0xa22 <vfprintf+0x3c>
 a20:	a5 c1       	rjmp	.+842    	; 0xd6c <vfprintf+0x386>
 a22:	85 32       	cpi	r24, 0x25	; 37
 a24:	39 f4       	brne	.+14     	; 0xa34 <vfprintf+0x4e>
 a26:	93 fd       	sbrc	r25, 3
 a28:	85 91       	lpm	r24, Z+
 a2a:	93 ff       	sbrs	r25, 3
 a2c:	81 91       	ld	r24, Z+
 a2e:	6f 01       	movw	r12, r30
 a30:	85 32       	cpi	r24, 0x25	; 37
 a32:	21 f4       	brne	.+8      	; 0xa3c <vfprintf+0x56>
 a34:	b7 01       	movw	r22, r14
 a36:	90 e0       	ldi	r25, 0x00	; 0
 a38:	b9 d1       	rcall	.+882    	; 0xdac <fputc>
 a3a:	e8 cf       	rjmp	.-48     	; 0xa0c <vfprintf+0x26>
 a3c:	51 2c       	mov	r5, r1
 a3e:	31 2c       	mov	r3, r1
 a40:	20 e0       	ldi	r18, 0x00	; 0
 a42:	20 32       	cpi	r18, 0x20	; 32
 a44:	a8 f4       	brcc	.+42     	; 0xa70 <vfprintf+0x8a>
 a46:	8b 32       	cpi	r24, 0x2B	; 43
 a48:	61 f0       	breq	.+24     	; 0xa62 <vfprintf+0x7c>
 a4a:	28 f4       	brcc	.+10     	; 0xa56 <vfprintf+0x70>
 a4c:	80 32       	cpi	r24, 0x20	; 32
 a4e:	51 f0       	breq	.+20     	; 0xa64 <vfprintf+0x7e>
 a50:	83 32       	cpi	r24, 0x23	; 35
 a52:	71 f4       	brne	.+28     	; 0xa70 <vfprintf+0x8a>
 a54:	0b c0       	rjmp	.+22     	; 0xa6c <vfprintf+0x86>
 a56:	8d 32       	cpi	r24, 0x2D	; 45
 a58:	39 f0       	breq	.+14     	; 0xa68 <vfprintf+0x82>
 a5a:	80 33       	cpi	r24, 0x30	; 48
 a5c:	49 f4       	brne	.+18     	; 0xa70 <vfprintf+0x8a>
 a5e:	21 60       	ori	r18, 0x01	; 1
 a60:	28 c0       	rjmp	.+80     	; 0xab2 <vfprintf+0xcc>
 a62:	22 60       	ori	r18, 0x02	; 2
 a64:	24 60       	ori	r18, 0x04	; 4
 a66:	25 c0       	rjmp	.+74     	; 0xab2 <vfprintf+0xcc>
 a68:	28 60       	ori	r18, 0x08	; 8
 a6a:	23 c0       	rjmp	.+70     	; 0xab2 <vfprintf+0xcc>
 a6c:	20 61       	ori	r18, 0x10	; 16
 a6e:	21 c0       	rjmp	.+66     	; 0xab2 <vfprintf+0xcc>
 a70:	27 fd       	sbrc	r18, 7
 a72:	27 c0       	rjmp	.+78     	; 0xac2 <vfprintf+0xdc>
 a74:	38 2f       	mov	r19, r24
 a76:	30 53       	subi	r19, 0x30	; 48
 a78:	3a 30       	cpi	r19, 0x0A	; 10
 a7a:	78 f4       	brcc	.+30     	; 0xa9a <vfprintf+0xb4>
 a7c:	26 ff       	sbrs	r18, 6
 a7e:	06 c0       	rjmp	.+12     	; 0xa8c <vfprintf+0xa6>
 a80:	fa e0       	ldi	r31, 0x0A	; 10
 a82:	5f 9e       	mul	r5, r31
 a84:	30 0d       	add	r19, r0
 a86:	11 24       	eor	r1, r1
 a88:	53 2e       	mov	r5, r19
 a8a:	13 c0       	rjmp	.+38     	; 0xab2 <vfprintf+0xcc>
 a8c:	8a e0       	ldi	r24, 0x0A	; 10
 a8e:	38 9e       	mul	r3, r24
 a90:	30 0d       	add	r19, r0
 a92:	11 24       	eor	r1, r1
 a94:	33 2e       	mov	r3, r19
 a96:	20 62       	ori	r18, 0x20	; 32
 a98:	0c c0       	rjmp	.+24     	; 0xab2 <vfprintf+0xcc>
 a9a:	8e 32       	cpi	r24, 0x2E	; 46
 a9c:	21 f4       	brne	.+8      	; 0xaa6 <vfprintf+0xc0>
 a9e:	26 fd       	sbrc	r18, 6
 aa0:	65 c1       	rjmp	.+714    	; 0xd6c <vfprintf+0x386>
 aa2:	20 64       	ori	r18, 0x40	; 64
 aa4:	06 c0       	rjmp	.+12     	; 0xab2 <vfprintf+0xcc>
 aa6:	8c 36       	cpi	r24, 0x6C	; 108
 aa8:	11 f4       	brne	.+4      	; 0xaae <vfprintf+0xc8>
 aaa:	20 68       	ori	r18, 0x80	; 128
 aac:	02 c0       	rjmp	.+4      	; 0xab2 <vfprintf+0xcc>
 aae:	88 36       	cpi	r24, 0x68	; 104
 ab0:	41 f4       	brne	.+16     	; 0xac2 <vfprintf+0xdc>
 ab2:	f6 01       	movw	r30, r12
 ab4:	93 fd       	sbrc	r25, 3
 ab6:	85 91       	lpm	r24, Z+
 ab8:	93 ff       	sbrs	r25, 3
 aba:	81 91       	ld	r24, Z+
 abc:	6f 01       	movw	r12, r30
 abe:	81 11       	cpse	r24, r1
 ac0:	c0 cf       	rjmp	.-128    	; 0xa42 <vfprintf+0x5c>
 ac2:	98 2f       	mov	r25, r24
 ac4:	95 54       	subi	r25, 0x45	; 69
 ac6:	93 30       	cpi	r25, 0x03	; 3
 ac8:	18 f0       	brcs	.+6      	; 0xad0 <vfprintf+0xea>
 aca:	90 52       	subi	r25, 0x20	; 32
 acc:	93 30       	cpi	r25, 0x03	; 3
 ace:	28 f4       	brcc	.+10     	; 0xada <vfprintf+0xf4>
 ad0:	0c 5f       	subi	r16, 0xFC	; 252
 ad2:	1f 4f       	sbci	r17, 0xFF	; 255
 ad4:	ff e3       	ldi	r31, 0x3F	; 63
 ad6:	f9 83       	std	Y+1, r31	; 0x01
 ad8:	0d c0       	rjmp	.+26     	; 0xaf4 <vfprintf+0x10e>
 ada:	83 36       	cpi	r24, 0x63	; 99
 adc:	31 f0       	breq	.+12     	; 0xaea <vfprintf+0x104>
 ade:	83 37       	cpi	r24, 0x73	; 115
 ae0:	71 f0       	breq	.+28     	; 0xafe <vfprintf+0x118>
 ae2:	83 35       	cpi	r24, 0x53	; 83
 ae4:	09 f0       	breq	.+2      	; 0xae8 <vfprintf+0x102>
 ae6:	5a c0       	rjmp	.+180    	; 0xb9c <vfprintf+0x1b6>
 ae8:	22 c0       	rjmp	.+68     	; 0xb2e <vfprintf+0x148>
 aea:	f8 01       	movw	r30, r16
 aec:	80 81       	ld	r24, Z
 aee:	89 83       	std	Y+1, r24	; 0x01
 af0:	0e 5f       	subi	r16, 0xFE	; 254
 af2:	1f 4f       	sbci	r17, 0xFF	; 255
 af4:	44 24       	eor	r4, r4
 af6:	43 94       	inc	r4
 af8:	51 2c       	mov	r5, r1
 afa:	54 01       	movw	r10, r8
 afc:	14 c0       	rjmp	.+40     	; 0xb26 <vfprintf+0x140>
 afe:	38 01       	movw	r6, r16
 b00:	f2 e0       	ldi	r31, 0x02	; 2
 b02:	6f 0e       	add	r6, r31
 b04:	71 1c       	adc	r7, r1
 b06:	f8 01       	movw	r30, r16
 b08:	a0 80       	ld	r10, Z
 b0a:	b1 80       	ldd	r11, Z+1	; 0x01
 b0c:	26 ff       	sbrs	r18, 6
 b0e:	03 c0       	rjmp	.+6      	; 0xb16 <vfprintf+0x130>
 b10:	65 2d       	mov	r22, r5
 b12:	70 e0       	ldi	r23, 0x00	; 0
 b14:	02 c0       	rjmp	.+4      	; 0xb1a <vfprintf+0x134>
 b16:	6f ef       	ldi	r22, 0xFF	; 255
 b18:	7f ef       	ldi	r23, 0xFF	; 255
 b1a:	c5 01       	movw	r24, r10
 b1c:	2c 87       	std	Y+12, r18	; 0x0c
 b1e:	3b d1       	rcall	.+630    	; 0xd96 <strnlen>
 b20:	2c 01       	movw	r4, r24
 b22:	83 01       	movw	r16, r6
 b24:	2c 85       	ldd	r18, Y+12	; 0x0c
 b26:	6f e7       	ldi	r22, 0x7F	; 127
 b28:	26 2e       	mov	r2, r22
 b2a:	22 22       	and	r2, r18
 b2c:	17 c0       	rjmp	.+46     	; 0xb5c <vfprintf+0x176>
 b2e:	38 01       	movw	r6, r16
 b30:	f2 e0       	ldi	r31, 0x02	; 2
 b32:	6f 0e       	add	r6, r31
 b34:	71 1c       	adc	r7, r1
 b36:	f8 01       	movw	r30, r16
 b38:	a0 80       	ld	r10, Z
 b3a:	b1 80       	ldd	r11, Z+1	; 0x01
 b3c:	26 ff       	sbrs	r18, 6
 b3e:	03 c0       	rjmp	.+6      	; 0xb46 <vfprintf+0x160>
 b40:	65 2d       	mov	r22, r5
 b42:	70 e0       	ldi	r23, 0x00	; 0
 b44:	02 c0       	rjmp	.+4      	; 0xb4a <vfprintf+0x164>
 b46:	6f ef       	ldi	r22, 0xFF	; 255
 b48:	7f ef       	ldi	r23, 0xFF	; 255
 b4a:	c5 01       	movw	r24, r10
 b4c:	2c 87       	std	Y+12, r18	; 0x0c
 b4e:	18 d1       	rcall	.+560    	; 0xd80 <strnlen_P>
 b50:	2c 01       	movw	r4, r24
 b52:	2c 85       	ldd	r18, Y+12	; 0x0c
 b54:	50 e8       	ldi	r21, 0x80	; 128
 b56:	25 2e       	mov	r2, r21
 b58:	22 2a       	or	r2, r18
 b5a:	83 01       	movw	r16, r6
 b5c:	23 fc       	sbrc	r2, 3
 b5e:	1a c0       	rjmp	.+52     	; 0xb94 <vfprintf+0x1ae>
 b60:	05 c0       	rjmp	.+10     	; 0xb6c <vfprintf+0x186>
 b62:	b7 01       	movw	r22, r14
 b64:	80 e2       	ldi	r24, 0x20	; 32
 b66:	90 e0       	ldi	r25, 0x00	; 0
 b68:	21 d1       	rcall	.+578    	; 0xdac <fputc>
 b6a:	3a 94       	dec	r3
 b6c:	83 2d       	mov	r24, r3
 b6e:	90 e0       	ldi	r25, 0x00	; 0
 b70:	48 16       	cp	r4, r24
 b72:	59 06       	cpc	r5, r25
 b74:	b0 f3       	brcs	.-20     	; 0xb62 <vfprintf+0x17c>
 b76:	0e c0       	rjmp	.+28     	; 0xb94 <vfprintf+0x1ae>
 b78:	f5 01       	movw	r30, r10
 b7a:	27 fc       	sbrc	r2, 7
 b7c:	85 91       	lpm	r24, Z+
 b7e:	27 fe       	sbrs	r2, 7
 b80:	81 91       	ld	r24, Z+
 b82:	5f 01       	movw	r10, r30
 b84:	b7 01       	movw	r22, r14
 b86:	90 e0       	ldi	r25, 0x00	; 0
 b88:	11 d1       	rcall	.+546    	; 0xdac <fputc>
 b8a:	31 10       	cpse	r3, r1
 b8c:	3a 94       	dec	r3
 b8e:	f1 e0       	ldi	r31, 0x01	; 1
 b90:	4f 1a       	sub	r4, r31
 b92:	51 08       	sbc	r5, r1
 b94:	41 14       	cp	r4, r1
 b96:	51 04       	cpc	r5, r1
 b98:	79 f7       	brne	.-34     	; 0xb78 <vfprintf+0x192>
 b9a:	e5 c0       	rjmp	.+458    	; 0xd66 <vfprintf+0x380>
 b9c:	84 36       	cpi	r24, 0x64	; 100
 b9e:	11 f0       	breq	.+4      	; 0xba4 <vfprintf+0x1be>
 ba0:	89 36       	cpi	r24, 0x69	; 105
 ba2:	39 f5       	brne	.+78     	; 0xbf2 <vfprintf+0x20c>
 ba4:	f8 01       	movw	r30, r16
 ba6:	27 ff       	sbrs	r18, 7
 ba8:	07 c0       	rjmp	.+14     	; 0xbb8 <vfprintf+0x1d2>
 baa:	60 81       	ld	r22, Z
 bac:	71 81       	ldd	r23, Z+1	; 0x01
 bae:	82 81       	ldd	r24, Z+2	; 0x02
 bb0:	93 81       	ldd	r25, Z+3	; 0x03
 bb2:	0c 5f       	subi	r16, 0xFC	; 252
 bb4:	1f 4f       	sbci	r17, 0xFF	; 255
 bb6:	08 c0       	rjmp	.+16     	; 0xbc8 <vfprintf+0x1e2>
 bb8:	60 81       	ld	r22, Z
 bba:	71 81       	ldd	r23, Z+1	; 0x01
 bbc:	88 27       	eor	r24, r24
 bbe:	77 fd       	sbrc	r23, 7
 bc0:	80 95       	com	r24
 bc2:	98 2f       	mov	r25, r24
 bc4:	0e 5f       	subi	r16, 0xFE	; 254
 bc6:	1f 4f       	sbci	r17, 0xFF	; 255
 bc8:	4f e6       	ldi	r20, 0x6F	; 111
 bca:	b4 2e       	mov	r11, r20
 bcc:	b2 22       	and	r11, r18
 bce:	97 ff       	sbrs	r25, 7
 bd0:	09 c0       	rjmp	.+18     	; 0xbe4 <vfprintf+0x1fe>
 bd2:	90 95       	com	r25
 bd4:	80 95       	com	r24
 bd6:	70 95       	com	r23
 bd8:	61 95       	neg	r22
 bda:	7f 4f       	sbci	r23, 0xFF	; 255
 bdc:	8f 4f       	sbci	r24, 0xFF	; 255
 bde:	9f 4f       	sbci	r25, 0xFF	; 255
 be0:	f0 e8       	ldi	r31, 0x80	; 128
 be2:	bf 2a       	or	r11, r31
 be4:	2a e0       	ldi	r18, 0x0A	; 10
 be6:	30 e0       	ldi	r19, 0x00	; 0
 be8:	a4 01       	movw	r20, r8
 bea:	0c d1       	rcall	.+536    	; 0xe04 <__ultoa_invert>
 bec:	a8 2e       	mov	r10, r24
 bee:	a8 18       	sub	r10, r8
 bf0:	42 c0       	rjmp	.+132    	; 0xc76 <vfprintf+0x290>
 bf2:	85 37       	cpi	r24, 0x75	; 117
 bf4:	31 f4       	brne	.+12     	; 0xc02 <vfprintf+0x21c>
 bf6:	3f ee       	ldi	r19, 0xEF	; 239
 bf8:	b3 2e       	mov	r11, r19
 bfa:	b2 22       	and	r11, r18
 bfc:	2a e0       	ldi	r18, 0x0A	; 10
 bfe:	30 e0       	ldi	r19, 0x00	; 0
 c00:	24 c0       	rjmp	.+72     	; 0xc4a <vfprintf+0x264>
 c02:	99 ef       	ldi	r25, 0xF9	; 249
 c04:	b9 2e       	mov	r11, r25
 c06:	b2 22       	and	r11, r18
 c08:	8f 36       	cpi	r24, 0x6F	; 111
 c0a:	b9 f0       	breq	.+46     	; 0xc3a <vfprintf+0x254>
 c0c:	20 f4       	brcc	.+8      	; 0xc16 <vfprintf+0x230>
 c0e:	88 35       	cpi	r24, 0x58	; 88
 c10:	09 f0       	breq	.+2      	; 0xc14 <vfprintf+0x22e>
 c12:	ac c0       	rjmp	.+344    	; 0xd6c <vfprintf+0x386>
 c14:	0d c0       	rjmp	.+26     	; 0xc30 <vfprintf+0x24a>
 c16:	80 37       	cpi	r24, 0x70	; 112
 c18:	21 f0       	breq	.+8      	; 0xc22 <vfprintf+0x23c>
 c1a:	88 37       	cpi	r24, 0x78	; 120
 c1c:	09 f0       	breq	.+2      	; 0xc20 <vfprintf+0x23a>
 c1e:	a6 c0       	rjmp	.+332    	; 0xd6c <vfprintf+0x386>
 c20:	02 c0       	rjmp	.+4      	; 0xc26 <vfprintf+0x240>
 c22:	20 e1       	ldi	r18, 0x10	; 16
 c24:	b2 2a       	or	r11, r18
 c26:	b4 fe       	sbrs	r11, 4
 c28:	0b c0       	rjmp	.+22     	; 0xc40 <vfprintf+0x25a>
 c2a:	84 e0       	ldi	r24, 0x04	; 4
 c2c:	b8 2a       	or	r11, r24
 c2e:	08 c0       	rjmp	.+16     	; 0xc40 <vfprintf+0x25a>
 c30:	24 ff       	sbrs	r18, 4
 c32:	09 c0       	rjmp	.+18     	; 0xc46 <vfprintf+0x260>
 c34:	e6 e0       	ldi	r30, 0x06	; 6
 c36:	be 2a       	or	r11, r30
 c38:	06 c0       	rjmp	.+12     	; 0xc46 <vfprintf+0x260>
 c3a:	28 e0       	ldi	r18, 0x08	; 8
 c3c:	30 e0       	ldi	r19, 0x00	; 0
 c3e:	05 c0       	rjmp	.+10     	; 0xc4a <vfprintf+0x264>
 c40:	20 e1       	ldi	r18, 0x10	; 16
 c42:	30 e0       	ldi	r19, 0x00	; 0
 c44:	02 c0       	rjmp	.+4      	; 0xc4a <vfprintf+0x264>
 c46:	20 e1       	ldi	r18, 0x10	; 16
 c48:	32 e0       	ldi	r19, 0x02	; 2
 c4a:	f8 01       	movw	r30, r16
 c4c:	b7 fe       	sbrs	r11, 7
 c4e:	07 c0       	rjmp	.+14     	; 0xc5e <vfprintf+0x278>
 c50:	60 81       	ld	r22, Z
 c52:	71 81       	ldd	r23, Z+1	; 0x01
 c54:	82 81       	ldd	r24, Z+2	; 0x02
 c56:	93 81       	ldd	r25, Z+3	; 0x03
 c58:	0c 5f       	subi	r16, 0xFC	; 252
 c5a:	1f 4f       	sbci	r17, 0xFF	; 255
 c5c:	06 c0       	rjmp	.+12     	; 0xc6a <vfprintf+0x284>
 c5e:	60 81       	ld	r22, Z
 c60:	71 81       	ldd	r23, Z+1	; 0x01
 c62:	80 e0       	ldi	r24, 0x00	; 0
 c64:	90 e0       	ldi	r25, 0x00	; 0
 c66:	0e 5f       	subi	r16, 0xFE	; 254
 c68:	1f 4f       	sbci	r17, 0xFF	; 255
 c6a:	a4 01       	movw	r20, r8
 c6c:	cb d0       	rcall	.+406    	; 0xe04 <__ultoa_invert>
 c6e:	a8 2e       	mov	r10, r24
 c70:	a8 18       	sub	r10, r8
 c72:	ff e7       	ldi	r31, 0x7F	; 127
 c74:	bf 22       	and	r11, r31
 c76:	b6 fe       	sbrs	r11, 6
 c78:	0b c0       	rjmp	.+22     	; 0xc90 <vfprintf+0x2aa>
 c7a:	2b 2d       	mov	r18, r11
 c7c:	2e 7f       	andi	r18, 0xFE	; 254
 c7e:	a5 14       	cp	r10, r5
 c80:	50 f4       	brcc	.+20     	; 0xc96 <vfprintf+0x2b0>
 c82:	b4 fe       	sbrs	r11, 4
 c84:	0a c0       	rjmp	.+20     	; 0xc9a <vfprintf+0x2b4>
 c86:	b2 fc       	sbrc	r11, 2
 c88:	08 c0       	rjmp	.+16     	; 0xc9a <vfprintf+0x2b4>
 c8a:	2b 2d       	mov	r18, r11
 c8c:	2e 7e       	andi	r18, 0xEE	; 238
 c8e:	05 c0       	rjmp	.+10     	; 0xc9a <vfprintf+0x2b4>
 c90:	7a 2c       	mov	r7, r10
 c92:	2b 2d       	mov	r18, r11
 c94:	03 c0       	rjmp	.+6      	; 0xc9c <vfprintf+0x2b6>
 c96:	7a 2c       	mov	r7, r10
 c98:	01 c0       	rjmp	.+2      	; 0xc9c <vfprintf+0x2b6>
 c9a:	75 2c       	mov	r7, r5
 c9c:	24 ff       	sbrs	r18, 4
 c9e:	0d c0       	rjmp	.+26     	; 0xcba <vfprintf+0x2d4>
 ca0:	fe 01       	movw	r30, r28
 ca2:	ea 0d       	add	r30, r10
 ca4:	f1 1d       	adc	r31, r1
 ca6:	80 81       	ld	r24, Z
 ca8:	80 33       	cpi	r24, 0x30	; 48
 caa:	11 f4       	brne	.+4      	; 0xcb0 <vfprintf+0x2ca>
 cac:	29 7e       	andi	r18, 0xE9	; 233
 cae:	09 c0       	rjmp	.+18     	; 0xcc2 <vfprintf+0x2dc>
 cb0:	22 ff       	sbrs	r18, 2
 cb2:	06 c0       	rjmp	.+12     	; 0xcc0 <vfprintf+0x2da>
 cb4:	73 94       	inc	r7
 cb6:	73 94       	inc	r7
 cb8:	04 c0       	rjmp	.+8      	; 0xcc2 <vfprintf+0x2dc>
 cba:	82 2f       	mov	r24, r18
 cbc:	86 78       	andi	r24, 0x86	; 134
 cbe:	09 f0       	breq	.+2      	; 0xcc2 <vfprintf+0x2dc>
 cc0:	73 94       	inc	r7
 cc2:	23 fd       	sbrc	r18, 3
 cc4:	13 c0       	rjmp	.+38     	; 0xcec <vfprintf+0x306>
 cc6:	20 ff       	sbrs	r18, 0
 cc8:	0e c0       	rjmp	.+28     	; 0xce6 <vfprintf+0x300>
 cca:	5a 2c       	mov	r5, r10
 ccc:	73 14       	cp	r7, r3
 cce:	58 f4       	brcc	.+22     	; 0xce6 <vfprintf+0x300>
 cd0:	53 0c       	add	r5, r3
 cd2:	57 18       	sub	r5, r7
 cd4:	73 2c       	mov	r7, r3
 cd6:	07 c0       	rjmp	.+14     	; 0xce6 <vfprintf+0x300>
 cd8:	b7 01       	movw	r22, r14
 cda:	80 e2       	ldi	r24, 0x20	; 32
 cdc:	90 e0       	ldi	r25, 0x00	; 0
 cde:	2c 87       	std	Y+12, r18	; 0x0c
 ce0:	65 d0       	rcall	.+202    	; 0xdac <fputc>
 ce2:	73 94       	inc	r7
 ce4:	2c 85       	ldd	r18, Y+12	; 0x0c
 ce6:	73 14       	cp	r7, r3
 ce8:	b8 f3       	brcs	.-18     	; 0xcd8 <vfprintf+0x2f2>
 cea:	04 c0       	rjmp	.+8      	; 0xcf4 <vfprintf+0x30e>
 cec:	73 14       	cp	r7, r3
 cee:	10 f4       	brcc	.+4      	; 0xcf4 <vfprintf+0x30e>
 cf0:	37 18       	sub	r3, r7
 cf2:	01 c0       	rjmp	.+2      	; 0xcf6 <vfprintf+0x310>
 cf4:	31 2c       	mov	r3, r1
 cf6:	24 ff       	sbrs	r18, 4
 cf8:	11 c0       	rjmp	.+34     	; 0xd1c <vfprintf+0x336>
 cfa:	b7 01       	movw	r22, r14
 cfc:	80 e3       	ldi	r24, 0x30	; 48
 cfe:	90 e0       	ldi	r25, 0x00	; 0
 d00:	2c 87       	std	Y+12, r18	; 0x0c
 d02:	54 d0       	rcall	.+168    	; 0xdac <fputc>
 d04:	2c 85       	ldd	r18, Y+12	; 0x0c
 d06:	22 ff       	sbrs	r18, 2
 d08:	1c c0       	rjmp	.+56     	; 0xd42 <vfprintf+0x35c>
 d0a:	21 ff       	sbrs	r18, 1
 d0c:	03 c0       	rjmp	.+6      	; 0xd14 <vfprintf+0x32e>
 d0e:	88 e5       	ldi	r24, 0x58	; 88
 d10:	90 e0       	ldi	r25, 0x00	; 0
 d12:	02 c0       	rjmp	.+4      	; 0xd18 <vfprintf+0x332>
 d14:	88 e7       	ldi	r24, 0x78	; 120
 d16:	90 e0       	ldi	r25, 0x00	; 0
 d18:	b7 01       	movw	r22, r14
 d1a:	0c c0       	rjmp	.+24     	; 0xd34 <vfprintf+0x34e>
 d1c:	82 2f       	mov	r24, r18
 d1e:	86 78       	andi	r24, 0x86	; 134
 d20:	81 f0       	breq	.+32     	; 0xd42 <vfprintf+0x35c>
 d22:	21 fd       	sbrc	r18, 1
 d24:	02 c0       	rjmp	.+4      	; 0xd2a <vfprintf+0x344>
 d26:	80 e2       	ldi	r24, 0x20	; 32
 d28:	01 c0       	rjmp	.+2      	; 0xd2c <vfprintf+0x346>
 d2a:	8b e2       	ldi	r24, 0x2B	; 43
 d2c:	27 fd       	sbrc	r18, 7
 d2e:	8d e2       	ldi	r24, 0x2D	; 45
 d30:	b7 01       	movw	r22, r14
 d32:	90 e0       	ldi	r25, 0x00	; 0
 d34:	3b d0       	rcall	.+118    	; 0xdac <fputc>
 d36:	05 c0       	rjmp	.+10     	; 0xd42 <vfprintf+0x35c>
 d38:	b7 01       	movw	r22, r14
 d3a:	80 e3       	ldi	r24, 0x30	; 48
 d3c:	90 e0       	ldi	r25, 0x00	; 0
 d3e:	36 d0       	rcall	.+108    	; 0xdac <fputc>
 d40:	5a 94       	dec	r5
 d42:	a5 14       	cp	r10, r5
 d44:	c8 f3       	brcs	.-14     	; 0xd38 <vfprintf+0x352>
 d46:	aa 94       	dec	r10
 d48:	f4 01       	movw	r30, r8
 d4a:	ea 0d       	add	r30, r10
 d4c:	f1 1d       	adc	r31, r1
 d4e:	b7 01       	movw	r22, r14
 d50:	80 81       	ld	r24, Z
 d52:	90 e0       	ldi	r25, 0x00	; 0
 d54:	2b d0       	rcall	.+86     	; 0xdac <fputc>
 d56:	a1 10       	cpse	r10, r1
 d58:	f6 cf       	rjmp	.-20     	; 0xd46 <vfprintf+0x360>
 d5a:	05 c0       	rjmp	.+10     	; 0xd66 <vfprintf+0x380>
 d5c:	b7 01       	movw	r22, r14
 d5e:	80 e2       	ldi	r24, 0x20	; 32
 d60:	90 e0       	ldi	r25, 0x00	; 0
 d62:	24 d0       	rcall	.+72     	; 0xdac <fputc>
 d64:	3a 94       	dec	r3
 d66:	31 10       	cpse	r3, r1
 d68:	f9 cf       	rjmp	.-14     	; 0xd5c <vfprintf+0x376>
 d6a:	50 ce       	rjmp	.-864    	; 0xa0c <vfprintf+0x26>
 d6c:	f7 01       	movw	r30, r14
 d6e:	26 81       	ldd	r18, Z+6	; 0x06
 d70:	37 81       	ldd	r19, Z+7	; 0x07
 d72:	02 c0       	rjmp	.+4      	; 0xd78 <vfprintf+0x392>
 d74:	2f ef       	ldi	r18, 0xFF	; 255
 d76:	3f ef       	ldi	r19, 0xFF	; 255
 d78:	c9 01       	movw	r24, r18
 d7a:	2c 96       	adiw	r28, 0x0c	; 12
 d7c:	e2 e1       	ldi	r30, 0x12	; 18
 d7e:	bc c0       	rjmp	.+376    	; 0xef8 <__epilogue_restores__>

00000d80 <strnlen_P>:
 d80:	fc 01       	movw	r30, r24
 d82:	05 90       	lpm	r0, Z+
 d84:	61 50       	subi	r22, 0x01	; 1
 d86:	70 40       	sbci	r23, 0x00	; 0
 d88:	01 10       	cpse	r0, r1
 d8a:	d8 f7       	brcc	.-10     	; 0xd82 <strnlen_P+0x2>
 d8c:	80 95       	com	r24
 d8e:	90 95       	com	r25
 d90:	8e 0f       	add	r24, r30
 d92:	9f 1f       	adc	r25, r31
 d94:	08 95       	ret

00000d96 <strnlen>:
 d96:	fc 01       	movw	r30, r24
 d98:	61 50       	subi	r22, 0x01	; 1
 d9a:	70 40       	sbci	r23, 0x00	; 0
 d9c:	01 90       	ld	r0, Z+
 d9e:	01 10       	cpse	r0, r1
 da0:	d8 f7       	brcc	.-10     	; 0xd98 <strnlen+0x2>
 da2:	80 95       	com	r24
 da4:	90 95       	com	r25
 da6:	8e 0f       	add	r24, r30
 da8:	9f 1f       	adc	r25, r31
 daa:	08 95       	ret

00000dac <fputc>:
 dac:	0f 93       	push	r16
 dae:	1f 93       	push	r17
 db0:	cf 93       	push	r28
 db2:	df 93       	push	r29
 db4:	8c 01       	movw	r16, r24
 db6:	eb 01       	movw	r28, r22
 db8:	8b 81       	ldd	r24, Y+3	; 0x03
 dba:	81 fd       	sbrc	r24, 1
 dbc:	03 c0       	rjmp	.+6      	; 0xdc4 <fputc+0x18>
 dbe:	0f ef       	ldi	r16, 0xFF	; 255
 dc0:	1f ef       	ldi	r17, 0xFF	; 255
 dc2:	1a c0       	rjmp	.+52     	; 0xdf8 <fputc+0x4c>
 dc4:	82 ff       	sbrs	r24, 2
 dc6:	0d c0       	rjmp	.+26     	; 0xde2 <fputc+0x36>
 dc8:	2e 81       	ldd	r18, Y+6	; 0x06
 dca:	3f 81       	ldd	r19, Y+7	; 0x07
 dcc:	8c 81       	ldd	r24, Y+4	; 0x04
 dce:	9d 81       	ldd	r25, Y+5	; 0x05
 dd0:	28 17       	cp	r18, r24
 dd2:	39 07       	cpc	r19, r25
 dd4:	64 f4       	brge	.+24     	; 0xdee <fputc+0x42>
 dd6:	e8 81       	ld	r30, Y
 dd8:	f9 81       	ldd	r31, Y+1	; 0x01
 dda:	01 93       	st	Z+, r16
 ddc:	f9 83       	std	Y+1, r31	; 0x01
 dde:	e8 83       	st	Y, r30
 de0:	06 c0       	rjmp	.+12     	; 0xdee <fputc+0x42>
 de2:	e8 85       	ldd	r30, Y+8	; 0x08
 de4:	f9 85       	ldd	r31, Y+9	; 0x09
 de6:	80 2f       	mov	r24, r16
 de8:	09 95       	icall
 dea:	89 2b       	or	r24, r25
 dec:	41 f7       	brne	.-48     	; 0xdbe <fputc+0x12>
 dee:	8e 81       	ldd	r24, Y+6	; 0x06
 df0:	9f 81       	ldd	r25, Y+7	; 0x07
 df2:	01 96       	adiw	r24, 0x01	; 1
 df4:	9f 83       	std	Y+7, r25	; 0x07
 df6:	8e 83       	std	Y+6, r24	; 0x06
 df8:	c8 01       	movw	r24, r16
 dfa:	df 91       	pop	r29
 dfc:	cf 91       	pop	r28
 dfe:	1f 91       	pop	r17
 e00:	0f 91       	pop	r16
 e02:	08 95       	ret

00000e04 <__ultoa_invert>:
 e04:	fa 01       	movw	r30, r20
 e06:	aa 27       	eor	r26, r26
 e08:	28 30       	cpi	r18, 0x08	; 8
 e0a:	51 f1       	breq	.+84     	; 0xe60 <__ultoa_invert+0x5c>
 e0c:	20 31       	cpi	r18, 0x10	; 16
 e0e:	81 f1       	breq	.+96     	; 0xe70 <__ultoa_invert+0x6c>
 e10:	e8 94       	clt
 e12:	6f 93       	push	r22
 e14:	6e 7f       	andi	r22, 0xFE	; 254
 e16:	6e 5f       	subi	r22, 0xFE	; 254
 e18:	7f 4f       	sbci	r23, 0xFF	; 255
 e1a:	8f 4f       	sbci	r24, 0xFF	; 255
 e1c:	9f 4f       	sbci	r25, 0xFF	; 255
 e1e:	af 4f       	sbci	r26, 0xFF	; 255
 e20:	b1 e0       	ldi	r27, 0x01	; 1
 e22:	3e d0       	rcall	.+124    	; 0xea0 <__ultoa_invert+0x9c>
 e24:	b4 e0       	ldi	r27, 0x04	; 4
 e26:	3c d0       	rcall	.+120    	; 0xea0 <__ultoa_invert+0x9c>
 e28:	67 0f       	add	r22, r23
 e2a:	78 1f       	adc	r23, r24
 e2c:	89 1f       	adc	r24, r25
 e2e:	9a 1f       	adc	r25, r26
 e30:	a1 1d       	adc	r26, r1
 e32:	68 0f       	add	r22, r24
 e34:	79 1f       	adc	r23, r25
 e36:	8a 1f       	adc	r24, r26
 e38:	91 1d       	adc	r25, r1
 e3a:	a1 1d       	adc	r26, r1
 e3c:	6a 0f       	add	r22, r26
 e3e:	71 1d       	adc	r23, r1
 e40:	81 1d       	adc	r24, r1
 e42:	91 1d       	adc	r25, r1
 e44:	a1 1d       	adc	r26, r1
 e46:	20 d0       	rcall	.+64     	; 0xe88 <__ultoa_invert+0x84>
 e48:	09 f4       	brne	.+2      	; 0xe4c <__ultoa_invert+0x48>
 e4a:	68 94       	set
 e4c:	3f 91       	pop	r19
 e4e:	2a e0       	ldi	r18, 0x0A	; 10
 e50:	26 9f       	mul	r18, r22
 e52:	11 24       	eor	r1, r1
 e54:	30 19       	sub	r19, r0
 e56:	30 5d       	subi	r19, 0xD0	; 208
 e58:	31 93       	st	Z+, r19
 e5a:	de f6       	brtc	.-74     	; 0xe12 <__ultoa_invert+0xe>
 e5c:	cf 01       	movw	r24, r30
 e5e:	08 95       	ret
 e60:	46 2f       	mov	r20, r22
 e62:	47 70       	andi	r20, 0x07	; 7
 e64:	40 5d       	subi	r20, 0xD0	; 208
 e66:	41 93       	st	Z+, r20
 e68:	b3 e0       	ldi	r27, 0x03	; 3
 e6a:	0f d0       	rcall	.+30     	; 0xe8a <__ultoa_invert+0x86>
 e6c:	c9 f7       	brne	.-14     	; 0xe60 <__ultoa_invert+0x5c>
 e6e:	f6 cf       	rjmp	.-20     	; 0xe5c <__ultoa_invert+0x58>
 e70:	46 2f       	mov	r20, r22
 e72:	4f 70       	andi	r20, 0x0F	; 15
 e74:	40 5d       	subi	r20, 0xD0	; 208
 e76:	4a 33       	cpi	r20, 0x3A	; 58
 e78:	18 f0       	brcs	.+6      	; 0xe80 <__ultoa_invert+0x7c>
 e7a:	49 5d       	subi	r20, 0xD9	; 217
 e7c:	31 fd       	sbrc	r19, 1
 e7e:	40 52       	subi	r20, 0x20	; 32
 e80:	41 93       	st	Z+, r20
 e82:	02 d0       	rcall	.+4      	; 0xe88 <__ultoa_invert+0x84>
 e84:	a9 f7       	brne	.-22     	; 0xe70 <__ultoa_invert+0x6c>
 e86:	ea cf       	rjmp	.-44     	; 0xe5c <__ultoa_invert+0x58>
 e88:	b4 e0       	ldi	r27, 0x04	; 4
 e8a:	a6 95       	lsr	r26
 e8c:	97 95       	ror	r25
 e8e:	87 95       	ror	r24
 e90:	77 95       	ror	r23
 e92:	67 95       	ror	r22
 e94:	ba 95       	dec	r27
 e96:	c9 f7       	brne	.-14     	; 0xe8a <__ultoa_invert+0x86>
 e98:	00 97       	sbiw	r24, 0x00	; 0
 e9a:	61 05       	cpc	r22, r1
 e9c:	71 05       	cpc	r23, r1
 e9e:	08 95       	ret
 ea0:	9b 01       	movw	r18, r22
 ea2:	ac 01       	movw	r20, r24
 ea4:	0a 2e       	mov	r0, r26
 ea6:	06 94       	lsr	r0
 ea8:	57 95       	ror	r21
 eaa:	47 95       	ror	r20
 eac:	37 95       	ror	r19
 eae:	27 95       	ror	r18
 eb0:	ba 95       	dec	r27
 eb2:	c9 f7       	brne	.-14     	; 0xea6 <__ultoa_invert+0xa2>
 eb4:	62 0f       	add	r22, r18
 eb6:	73 1f       	adc	r23, r19
 eb8:	84 1f       	adc	r24, r20
 eba:	95 1f       	adc	r25, r21
 ebc:	a0 1d       	adc	r26, r0
 ebe:	08 95       	ret

00000ec0 <__prologue_saves__>:
 ec0:	2f 92       	push	r2
 ec2:	3f 92       	push	r3
 ec4:	4f 92       	push	r4
 ec6:	5f 92       	push	r5
 ec8:	6f 92       	push	r6
 eca:	7f 92       	push	r7
 ecc:	8f 92       	push	r8
 ece:	9f 92       	push	r9
 ed0:	af 92       	push	r10
 ed2:	bf 92       	push	r11
 ed4:	cf 92       	push	r12
 ed6:	df 92       	push	r13
 ed8:	ef 92       	push	r14
 eda:	ff 92       	push	r15
 edc:	0f 93       	push	r16
 ede:	1f 93       	push	r17
 ee0:	cf 93       	push	r28
 ee2:	df 93       	push	r29
 ee4:	cd b7       	in	r28, 0x3d	; 61
 ee6:	de b7       	in	r29, 0x3e	; 62
 ee8:	ca 1b       	sub	r28, r26
 eea:	db 0b       	sbc	r29, r27
 eec:	0f b6       	in	r0, 0x3f	; 63
 eee:	f8 94       	cli
 ef0:	de bf       	out	0x3e, r29	; 62
 ef2:	0f be       	out	0x3f, r0	; 63
 ef4:	cd bf       	out	0x3d, r28	; 61
 ef6:	09 94       	ijmp

00000ef8 <__epilogue_restores__>:
 ef8:	2a 88       	ldd	r2, Y+18	; 0x12
 efa:	39 88       	ldd	r3, Y+17	; 0x11
 efc:	48 88       	ldd	r4, Y+16	; 0x10
 efe:	5f 84       	ldd	r5, Y+15	; 0x0f
 f00:	6e 84       	ldd	r6, Y+14	; 0x0e
 f02:	7d 84       	ldd	r7, Y+13	; 0x0d
 f04:	8c 84       	ldd	r8, Y+12	; 0x0c
 f06:	9b 84       	ldd	r9, Y+11	; 0x0b
 f08:	aa 84       	ldd	r10, Y+10	; 0x0a
 f0a:	b9 84       	ldd	r11, Y+9	; 0x09
 f0c:	c8 84       	ldd	r12, Y+8	; 0x08
 f0e:	df 80       	ldd	r13, Y+7	; 0x07
 f10:	ee 80       	ldd	r14, Y+6	; 0x06
 f12:	fd 80       	ldd	r15, Y+5	; 0x05
 f14:	0c 81       	ldd	r16, Y+4	; 0x04
 f16:	1b 81       	ldd	r17, Y+3	; 0x03
 f18:	aa 81       	ldd	r26, Y+2	; 0x02
 f1a:	b9 81       	ldd	r27, Y+1	; 0x01
 f1c:	ce 0f       	add	r28, r30
 f1e:	d1 1d       	adc	r29, r1
 f20:	0f b6       	in	r0, 0x3f	; 63
 f22:	f8 94       	cli
 f24:	de bf       	out	0x3e, r29	; 62
 f26:	0f be       	out	0x3f, r0	; 63
 f28:	cd bf       	out	0x3d, r28	; 61
 f2a:	ed 01       	movw	r28, r26
 f2c:	08 95       	ret

00000f2e <_exit>:
 f2e:	f8 94       	cli

00000f30 <__stop_program>:
 f30:	ff cf       	rjmp	.-2      	; 0xf30 <__stop_program>
